{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OWASP Smart Contract Security","text":"","tags":[]},{"location":"#our-mission","title":"Our MissionOWASP SCSVSOWASP SCWEOWASP SCSTGOWASP SCS Checklist","text":"\"Define the industry standard for Smart Contract security.\" <p>The OWASP Smart Contracts Security (SCS) is a comprehensive project aimed at enhancing the security of smart contracts. It provides a structured framework for developers, auditors, and security professionals to follow best practices, detect vulnerabilities, and implement robust security measures in smart contracts, decentralized applications (dApps) and EVM-based blockchain systems.</p>  Download the SCSVS  Access the Beta  Download the SCSTG  Download the Checklist <p></p>","tags":[]},{"location":"#trusted-by","title":"Trusted By","text":"<p>The OWASP SCSVS and SCSTG are trusted by the following platform providers and standardization, governmental and educational institutions. Learn more.</p>","tags":[]},{"location":"#scs-advocates","title":"\ud83e\udd47 SCS Advocates","text":"<p>SCS Advocates are key industry adopters of the OWASP SCSVS and SCSTG who have invested a significant and consistent amount of resources to drive the project forward and ensure its continued success. This includes making consistent high-impact contributions and actively promoting the adoption and usage of the project. Learn more.</p> <p></p>","tags":[]},{"location":"contact/","title":"\ud83d\udcac Connect with Us","text":"<p>You can follow and reach out to the OWASP SCS team in many ways.</p> <ul> <li>Send us your questions and ideas to GitHub Discussions</li> <li>Stay always up-to-date by following us on Twitter.</li> <li>Join our Slack community</li> </ul> <p>If you'd like to contribute, take a look at our Contributions page or reach out to the project leaders Carlos or Sven.</p> <p> </p> <p>Request an invitation to join our Slack channel <code>#owasp-scs</code></p> <p></p>","tags":[]},{"location":"contact/#owasp-scs-project-leaders","title":"OWASP SCS Project Leaders","text":"","tags":[]},{"location":"contact/#shashank","title":"Shashank","text":"<p>Shashank brings over a decade of expertise in uncovering vulnerabilities, reporting them to reputable institutions, conducting pentests, and overseeing responsible disclosure and bug bounty initiatives. His contributions have earned him a place in the Security Hall of Fame for Apple (CVE-2017-7063, CVE-2017-7062, CVE-2017-2458), Twitter, Google, Facebook, Dropbox, and more than 40 other organizations, showcasing his knack for identifying significant security concerns. Apart from Bug Bounties, Shashank has worked as a security analyst for HackerOne and performed 200+ pentests with Cobalt. He was also a security engineer for Web3 Company Avalanche before starting his venture CredShields where he is building an AI-powered cloud-based Smart Contract Security Scanner called SolidityScan.com</p> <p> </p> <p></p>","tags":[]},{"location":"contact/#owasp-scs-project-maintainers","title":"OWASP SCS Project Maintainers","text":"","tags":[]},{"location":"contact/#pratik-lagaskar","title":"Pratik Lagaskar","text":"<p>Pratik Bio</p> <p> </p> <p></p>","tags":[]},{"location":"contact/#nehal-pillai","title":"Nehal Pillai","text":"<p>Nehal Bio</p> <p> </p> <p></p>","tags":[]},{"location":"contributing/","title":"Contributing to the SCS Project","text":"<p>First of all, \u2b50 Give us a Star in GitHub!</p> <p></p> <p></p> <p>The SCS project is an open source effort and we welcome all kinds of contributions and feedback.</p> <p>Help us improve &amp; join our community:</p> <ul> <li>\ud83d\udc1e Report an error (typos, grammar) or fix it on a Pull Request.</li> <li>\ud83d\udcac Give feedback (SCSTG/SCSVS).</li> <li>\ud83d\ude4f Ask questions (SCSTG/SCSVS).</li> </ul> <p>Contribute with content:</p> <ul> <li>\ud83d\udca1 Propose ideas or suggest improvements (SCSTG/SCSVS). If it qualifies we'll promote it to an Issue.</li> <li>\ud83d\udcc4 Create a Pull Request for concrete fixes (e.g. grammar/typos) or content already approved by the core team.</li> </ul> <p>Before you start contributing, please check our pages \"How Can You Contribute?\" and \"Getting Started\". If you have any doubts please contact us.</p>","tags":[]},{"location":"contributing/#what-not-to-do","title":"\ud83d\udeab What not to do","text":"<p>Although we greatly appreciate any and all contributions to the project, there are a few things that you should take into consideration:</p> <ul> <li>No advertisement: The OWASP mobile Security Project cannot be used as a platform for advertisement of commercial tools, companies or individuals. Technical content such as the implementation of certain techniques or tests should be written with free and open-source tools in mind. Commercial tools are typically not accepted, but might be referenced in some specific cases.</li> <li>No unnecessary self-promotion of tools or blog posts: If you have a relation with one of the URLs or tools you are referencing, please state so in the PR so that we can verify that the reference is in line with the rest of the guide.</li> </ul> <p>Please be sure to take a careful look at our Code of Conduct for all the details and ask us in case of doubt.</p> <p></p>","tags":[]},{"location":"contributing/#our-contributors","title":"Our Contributors","text":"<p>All of our contributors are listed in GitHub repos. See OWASP SCSTG Authors &amp; Co-Authors, SCSTG Contributors and SCSVS Contributors.</p> <p></p>","tags":[]},{"location":"contributing/#owasp-scs-project-featured-contributions","title":"OWASP SCS Project Featured Contributions","text":"<ul> <li>Pratik Lagaskar (Automation in GitHub Actions)</li> </ul>","tags":[]},{"location":"contributing/#owasp-scsvs","title":"OWASP SCSVS","text":"<p>The latest version of the SCSVS v1 including all translations is available here: https://github.com/OWASP/owasp-scsvs/releases/tag/v0.0.1</p> Project Lead Lead Author Contributors and Reviewers Shashank Pratik Lagaskar Nehal Pillai <p></p> Language Translators &amp; Reviewers","tags":[]},{"location":"contributing/#owasp-scstg","title":"OWASP SCSTG","text":"<p>The latest version of the SCSTG v0.0.1 is available here: https://github.com/OWASP/owasp-scstg/releases/tag/v0.0.1</p> <p>Note: This contributor table is generated based on our GitHub contribution statistics. For more information on these stats, see the GitHub Repository README. We manually update the table, so be patient if you're not listed immediately.</p> <ul> <li>Reviewers: Reviewers have consistently provided useful feedback through GitHub issues and pull request comments.</li> <li>Top Contributors: Top contributors have consistently contributed quality content and have at least 500 additions logged in the GitHub repository.</li> <li>Contributors: Contributors have contributed quality content and have at least 50 additions logged in the GitHub repository.</li> <li>Mini Contributors: Many other contributors have committed small amounts of content, such as a single word or sentence (less than 50 additions).</li> </ul> Authors Reviewers Top Contributors Contributors Mini Contributors Editors Pratik Lagaskar Nehal Pillai","tags":[]},{"location":"donate/","title":"Donations","text":"<p>We thank our donators for providing the funds to support us on our project activities.</p> <p>The OWASP Foundation is very grateful for the support by the individuals and organizations listed. However please note, the OWASP Foundation is strictly vendor neutral and does not endorse any of its supporters. Donations do not influence the content of the SCSVS or SCSTG in any way.</p> <p> </p> <p>While both the SCSVS and the SCSTG are created and maintained by the community on a voluntary basis, sometimes a little bit of outside help is required.</p> <p>Monetary Donations: You can donate any amount you like, no matter how small, anyone can help. From 500$ up you may select a Donation Package and be listed as a donator.</p> <p>100% of the funds go to the OWASP Foundation and allow us funding our project activities such as contracting technical editors, graphic designers, software developers, purchasing test devices, creating swag, etc.</p> <p>  Donate  Purchase the SCSTG </p> <p>Effort Based: You can instead support the project by contributing with your work and end up at our acknowledgement section.</p> <p>If you're a company, consider becoming a \"SCS Advocate\" which is the highest status that companies can achieve in the project acknowledging that they've gone above and beyond to support the project.</p> <p>  Contribute  Become a SCS Advocate </p>","tags":[]},{"location":"tags/","title":"Tags","text":"","tags":[]},{"location":"talks/","title":"\ud83c\udf99 Talks","text":"Date Event Title Video Slides NA Na Na Na NA","tags":[]},{"location":"SCSTG/","title":"OWASP SCSTG","text":"<p> GitHub Repo</p> <p>The OWASP Smart Contract Security Testing Guide (SCSTG) is a comprehensive manual designed to assist developers, auditors, and security professionals in evaluating the security of smart contracts. It provides detailed methodologies for identifying, verifying, and addressing vulnerabilities in smart contracts across various risk categories. The guide includes examples of common security flaws, methods for detecting these issues, and strategies for mitigating or eliminating the risks. </p> <p>It describes technical processes for verifying the controls listed in the OWASP SCSVS through the weaknesses defined by the OWASP SCWE.</p> <p></p> <p> Download the SCSTG</p> <p></p> <p>Start exploring the SCSTG:</p> <p>  Tests (v1)</p> <p>  Support the project by purchasing the OWASP SCSTG on leanpub.com. All funds raised through sales of this book go directly into the project budget and will be used to for technical editing and designing the book and fund production of future releases.</p> <p></p>","tags":[]},{"location":"SCSTG/0x01-Foreword/","title":"Foreword","text":"<p>Welcome to the OWASP Smart Contract Security Testing Guide. Feel free to explore the existing content, but do note that it may change at any time. </p>","tags":[]},{"location":"SCSTG/0x02a-Frontispiece/","title":"Frontispiece","text":"","tags":[]},{"location":"SCSTG/0x02a-Frontispiece/#about-the-owasp-scstg","title":"About the OWASP SCSTG","text":"<p>The OWASP Smart Contract Security Testing Guide (SCSTG), which is part of the OWASP Smart Contract Security (SCS) flagship project, is a comprehensive manual covering the processes, techniques, and tools used during smart contract security analysis, as well as an exhaustive set of test cases for verifying the requirements listed in the OWASP Smart Contract Verification Standard (SCSVS), providing a baseline for complete and consistent security tests.</p> <p>The OWASP SCSVS and SCSTG are trusted by the following platform providers and standardization, governmental and educational institutions. Learn more.</p>","tags":[]},{"location":"SCSTG/0x02a-Frontispiece/#authors","title":"Authors","text":"","tags":[]},{"location":"SCSTG/0x02a-Frontispiece/#changelog","title":"Changelog","text":"<p>All our Changelogs are available online at the OWASP SCSTG GitHub repository, see the Releases page:</p> <p>https://github.com/OWASP/owasp-scstg/releases</p>","tags":[]},{"location":"SCSTG/0x02a-Frontispiece/#disclaimer","title":"Disclaimer","text":"<p>Please consult the laws in your country before executing any tests against smart contracts by utilizing the SCSTG materials. Refrain from violating the laws with anything described in the SCSTG.</p> <p>Our [Code of Conduct] has further details: https://github.com/OWASP/owasp-scstg/blob/master/.github/CODE_OF_CONDUCT.md</p> <p>OWASP thanks the many authors, reviewers, and editors for their hard work in developing this guide. If you have any comments or suggestions, please connect with us: https://scs.owasp.org/contact</p> <p>If you find any inconsistencies or typos please open an issue in the OWASP SCSTG Github Repo: https://github.com/OWASP/owasp-scstg</p>","tags":[]},{"location":"SCSTG/0x02a-Frontispiece/#copyright-and-license","title":"Copyright and License","text":"<p>Copyright \u00a9 The OWASP Foundation. This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. For any reuse or distribution, you must make clear to others the license terms of this work.</p> <p></p>","tags":[]},{"location":"SCSTG/0x02b-SCSVS-SCSTG-Adoption/","title":"OWASP SCSVS and SCSTG Adoption","text":"<p>The OWASP SCSVS and SCSTG are trusted by the following platform providers and standardization, governmental and educational institutions.</p>","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/","title":"Acknowledgments","text":"","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/#contributors","title":"Contributors","text":"<p>All of our contributors are listed in the Contributing section of the OWASP SCS website:</p> <p>https://scs.owasp.org/contributing/</p>","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/#scs-advocates","title":"\ud83e\udd47 SCS Advocates","text":"<p>SCS Advocates are industry supporters of the OWASP SCSVS and SCSTG who have invested a significant and consistent amount of resources to push the project forward by providing consistent high-impact contributions and continuously spreading the word.</p> <p>\ud83e\udd47 Being a \"SCS Advocate\" is the highest status that companies can achieve in the project, acknowledging that they've gone above and beyond to support the project.</p> <p>SCS Advocates continuously support the project with time/dedicated resources with clear/high impact. To achieve this status, you'll need to demonstrate that you make consistent high-impact contributions to the project. For example:</p> <ul> <li>Content Pull Requests (e.g. adding/updating existing tests, tooling, maintaining code samples, etc.)</li> <li>Technical PR reviews</li> <li>Improving automation (GitHub Actions)</li> <li>Upgrading, extending or creating new Crackmes</li> <li>Moderating GitHub Discussions</li> <li>Providing high quality feedback to the project and for special events such as the SCSVS/SCSTG refactoring.</li> <li>etc.</li> </ul> <p>The following will be considered but it's not a requirement:</p> <ul> <li>Showing Adoption: it should be clear just from looking at the official company page that they have adopted the OWASP SCSVS and SCSTG. For example:<ul> <li>Services/products</li> <li>Resources (e.g. blog posts, press releases, public pentest reports)</li> <li>Trainings</li> <li>etc.</li> </ul> </li> <li>Spreading the word and promoting the project with many presentations each year, public trainings, high social media involvement (e.g. liking, re-sharing, doing own posting specifically to promote the project).</li> </ul>","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/#benefits","title":"\ud83c\udf81 Benefits","text":"<ul> <li>Company logo displayed in our main READMEs and main OWASP project site.</li> <li>Linked blog posts in the SCSTG will include the company name.</li> <li>Special acknowledgement on each SCSTG release containing the contributed PRs.</li> <li>Re-shares from the OWASP SCS accounts on new publications (e.g. retweets).</li> <li>Initial public \"Thank You\" and yearly after successful renewal.</li> </ul>","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/#how-to-apply","title":"\ud83d\udcdd How to Apply","text":"<p>If you'd like to apply please contact the project leaders by sending an email. Please be sure to include sufficient evidence (e.g including links to PRs) showing what you've done in the 6 months period that goes inline with the three categories described above:</p> <ul> <li>Make consistent high-impact contributions</li> <li>Showing Adoption</li> <li>Spreading the word</li> </ul>","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/#important-disclaimers","title":"\u2757 Important Disclaimers","text":"<ul> <li>If the \"SCS Advocate\" status is granted and you'd like to maintain it, the aforementioned contributions must remain consistent after the initial period as well. You should keep collecting this evidence and send us a contribution report yearly.</li> <li>Financial donations are not part of the eligibility criteria but will be listed for completion.</li> <li>Re-shared publications and blog posts linked in SCSTG text must be educational and focus on mobile security or SCSVS/SCSTG and not endorse company products/services.</li> <li>Advocate Companies may use the logo and links to SCSVS/SCSTG resources as part of their communication but cannot use them as an endorsement by OWASP as a preferred provider of software and services.<ul> <li>Example of what's ok: list SCS Advocate status on website home page, in \"about company\" slides in sales presentations, on sales collateral.</li> <li>Example of what's not ok: a SCS Advocate cannot claim they are OWASP certified.</li> </ul> </li> <li>The quality of the application of the SCSVS/SCSTG by these companies has not been vetted by the SCS team.</li> </ul> <p>The OWASP Foundation is very grateful for the support by the individuals and organizations listed. However please note, the OWASP Foundation is strictly vendor neutral and does not endorse any of its supporters. SCS Advocates do not influence the content of the SCSVS or SCSTG in any way.</p>","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/#our-scs-advocates","title":"Our SCS Advocates","text":"<p>CredShields has provided consistent high-impact contributions to the project and has successfully helped spread the word.</p> <p>We'd like to thank CredShields for its exemplary contribution which sets a blueprint for other potential contributors wanting to push the project forward.</p>","tags":[]},{"location":"SCSTG/0x02c-Acknowledgements/#donators","title":"Donators","text":"<p>While both the SCSVS and the SCSTG are created and maintained by the community on a voluntary basis, sometimes a little bit of outside help is required. We therefore thank our donators for providing the funds to be able to hire technical editors. Note that their donation does not influence the content of the SCSVS or SCSTG in any way. The Donation Packages are described on our OWASP Project page.</p>","tags":[]},{"location":"SCSTG/0x03-Overview/","title":"Introduction to the OWASP Smart Contract Security Project","text":"","tags":[]},{"location":"SCSTG/0x03-Overview/#how-to-use-the-mobile-application-security-project","title":"How to Use the Mobile Application Security Project","text":"","tags":[]},{"location":"SCSTG/0x04a-Smart-Contract-Taxonomy/","title":"Smart Contract Taxonomy","text":"","tags":[]},{"location":"SCSTG/tests/","title":"SCSTG Tests","text":"TEST ID Title SCSVS CG ID SCSVS SCG IDs Last Updated SCSTG-TEST-0001  Multi-Signature Schemes SCSVS-AUTH SCSVS-AUTH-1 N/A SCSTG-TEST-0004  Access Control on Critical Functions SCSVS-AUTH SCSVS-AUTH-1 N/A SCSTG-TEST-0006  Timed Permissions SCSVS-AUTH SCSVS-AUTH-2 N/A SCSTG-TEST-0005  Timed Permissions SCSVS-AUTH SCSVS-AUTH-1 N/A SCSTG-TEST-0002  Identity Verification SCSVS-AUTH SCSVS-AUTH-1 N/A SCSTG-TEST-0003  Least Privilege Principle SCSVS-AUTH SCSVS-AUTH-1 N/A","tags":[]},{"location":"SCSTG/tests/SCSVS-AUTH/SCSTG-TEST-0001/","title":"SCSTG-TEST-0001: Multi-Signature Schemes","text":"<p>Ensure that the visibility modifier for all functions is appropriate, preventing unnecessary exposure of internal functions.</p> <ul> <li>If a function is only meant to be used internally, it should be marked as internal or private. This ensures it cannot be called externally or by other contracts.</li> </ul> <pre><code>function internalFunction() internal { ... }  // internal function, only accessible within the contract\nfunction privateFunction() private { ... }  // private function, not even accessible by derived contracts\n</code></pre>","tags":["test","android","SCSVS-AUTH-1","SCSVS-AUTH"]},{"location":"SCSTG/tests/SCSVS-AUTH/SCSTG-TEST-0002/","title":"SCSTG-TEST-0002: Identity Verification","text":"<p>Validate that unexpected addresses do not result in unintended behaviors, particularly when these addresses refer to contracts within the same protocol.</p> <ul> <li>Ensure that when interacting with contracts, unexpected addresses are properly validated before performing sensitive operations. <pre><code>require(address(contract) != address(0), \"Invalid address\");\n</code></pre></li> </ul> <p>Verify that functions like ecrecover handle all potential null addresses properly to avoid vulnerabilities arising from unexpected ecrecover outputs.</p> <ul> <li>Ensure that ecrecover does not process empty or null addresses. <pre><code>address recovered = ecrecover(messageHash, v, r, s);\nrequire(recovered != address(0), \"Invalid signature\");\n</code></pre></li> </ul>","tags":["test","android","SCSVS-AUTH-1","SCSVS-AUTH"]},{"location":"SCSTG/tests/SCSVS-AUTH/SCSTG-TEST-0003/","title":"SCSTG-TEST-0003: Least Privilege Principle","text":"<p>Use msg.sender instead of tx.origin for authorization to avoid potential abuse from malicious contracts; include checks like require(tx.origin == msg.sender) to ensure the sender is an EOA.</p> <ul> <li>tx.origin can be abused by malicious contracts to trick the system into performing actions on behalf of an unsuspecting user. msg.sender is preferred since it refers to the direct sender of the message. <pre><code>require(msg.sender == owner, \"Not the owner\");\nrequire(tx.origin == msg.sender, \"Only EOA can execute\");\n</code></pre></li> </ul> <p>Certain addresses might be blocked or restricted from receiving tokens (e.g., LUSD). Ensure that address restrictions are properly managed and verified.</p> <ul> <li>If certain addresses (like LUSD) should be blocked from receiving tokens, ensure that there\u2019s a check in place to restrict these addresses. <pre><code>address restrictedAddress = 0x123...;  // Example of a restricted address\nrequire(msg.sender != restrictedAddress, \"Restricted address cannot perform this operation\");\n</code></pre></li> </ul> <p>Ensure that Guard\u2019s hooks (e.g., checkTransaction(), checkAfterExecution()) are executed to enforce critical security checks.</p> <ul> <li>If using a Guard contract, ensure that hooks like checkTransaction() or checkAfterExecution() are properly implemented to enforce security conditions. <pre><code>function checkTransaction() internal {\n    // Add conditions to verify transaction before execution\n}\n\nfunction checkAfterExecution() internal {\n    // Add conditions to verify transaction after execution\n}\n</code></pre></li> </ul>","tags":["test","android","SCSVS-AUTH-1","SCSVS-AUTH"]},{"location":"SCSTG/tests/SCSVS-AUTH/SCSTG-TEST-0004/","title":"SCSTG-TEST-0004: Access Control on Critical Functions","text":"<p>Ensure that access controls are implemented correctly to determine who can use certain functions, and avoid unauthorized changes or withdrawals.</p> <ul> <li>Ensure that functions requiring specific roles or permissions are restricted properly using onlyOwner or role-based checks. <pre><code>    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not the owner\");\n        _;\n    }\n\n    function withdraw() external onlyOwner {\n        // Only the owner can withdraw\n    }\n</code></pre></li> </ul>","tags":["test","android","SCSVS-AUTH-1","SCSVS-AUTH"]},{"location":"SCSTG/tests/SCSVS-AUTH/SCSTG-TEST-0005/","title":"SCSTG-TEST-0005: Timed Permissions","text":"<p>Ensure that access controls are implemented correctly to determine who can use certain functions, and avoid unauthorized changes or withdrawals.</p> <ul> <li>Ensure that functions requiring specific roles or permissions are restricted properly using onlyOwner or role-based checks.</li> </ul> <pre><code>    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not the owner\");\n        _;\n    }\n\n    function withdraw() external onlyOwner {\n        // Only the owner can withdraw\n    }\n</code></pre>","tags":["test","android","SCSVS-AUTH-1","SCSVS-AUTH"]},{"location":"SCSTG/tests/SCSVS-AUTH/SCSTG-TEST-0006/","title":"SCSTG-TEST-0006: Timed Permissions","text":"<p>Ensure that <code>msg.sender</code> validation is properly implemented when using Merkle trees to maintain security and prevent unauthorized access.</p> <ul> <li>When using Merkle trees to authenticate users or grant permissions, ensure that the contract verifies that <code>msg.sender</code> matches the expected address and Merkle proof. This prevents unauthorized actors from bypassing security by submitting incorrect proofs.</li> </ul> <pre><code>    require(verifyMerkleProof(msg.sender, merkleProof), \"Invalid Merkle proof\");\n</code></pre> <ul> <li> <p>Use whitelisting to restrict interactions to a specific set of addresses, providing additional security against malicious actors.</p> </li> <li> <p>Implement a whitelisting mechanism that allows only approved addresses to interact with specific functions. Ensure that only addresses explicitly added to the whitelist are able to execute sensitive operations.</p> </li> </ul> <p><pre><code>    address[] public whitelist;\n\n    modifier onlyWhitelisted() {\n        bool isWhitelisted = false;\n        for (uint i = 0; i &lt; whitelist.length; i++) {\n            if (msg.sender == whitelist[i]) {\n                isWhitelisted = true;\n                break;\n            }\n        }\n        require(isWhitelisted, \"Address not whitelisted\");\n        _;\n    }\n\n    function addToWhitelist(address _address) external onlyOwner {\n        whitelist.push(_address);\n    }\n</code></pre> - Ensure that functions modifying the contract state or accessing sensitive operations have proper access controls implemented.</p> <ul> <li>Critical functions, such as those that modify contract state or handle sensitive information, should only be callable by authorized addresses (e.g., the owner or an admin). Use modifiers to enforce access controls for these functions.</li> </ul> <pre><code>    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the contract owner\");\n        _;\n    }\n\n    function modifyContractState() external onlyOwner {\n        // Logic to modify contract state\n    }\n</code></pre>","tags":["test","ethereum","SCSVS-AUTH-2","SCSVS-AUTH"]},{"location":"SCSTG/tests/SCSVS-AUTH/overview/","title":"Access Control and Authentication Vulnerabilties","text":"","tags":[]},{"location":"SCSTG/tests/SCSVS-AUTH/overview/#description","title":"Description","text":"<p>Improper access control is a critical security vulnerability in smart contracts that occurs when unauthorized users can access or modify sensitive functions or data. This issue typically arises when the code does not enforce strict access restrictions based on user permissions.</p> <p>Access control vulnerabilities are especially significant in scenarios involving governance or critical operations, such as:</p> <ul> <li>Minting tokens</li> <li>Voting on proposals</li> <li>Withdrawing funds</li> <li>Pausing or upgrading contracts</li> <li>Changing contract ownership</li> </ul> <p>Example: Code Without Proper Access Control</p> <pre><code>function burn(address account, uint256 amount) public \n{\n    // No access control is implemented for the burn function\n    _burn(account, amount); \n}\n</code></pre>","tags":[]},{"location":"SCSTG/tests/SCSVS-AUTH/overview/#impact","title":"Impact","text":"<ul> <li>Attackers can gain unauthorized access to critical functions and data within the contract, compromising its integrity and security.</li> <li>Vulnerabilities can lead to the theft of funds or assets controlled by the contract, causing significant financial damage to users and stakeholders.</li> </ul>","tags":[]},{"location":"SCSTG/tests/SCSVS-AUTH/overview/#remediation","title":"Remediation","text":"<ul> <li>Ensure initialization functions can only be called once and exclusively by authorized entities.</li> <li>Use established access control patterns like Ownable or RBAC (Role-Based Access Control) in your contracts to manage permissions and ensure that only authorized users can access certain functions. This can be done by adding appropriate access control modifiers, such as onlyOwner or custom roles to sensitive functions.</li> </ul>","tags":[]},{"location":"SCSTG/tests/SCSVS-AUTH/overview/#examples-of-smart-contracts-that-fell-victim-to-improper-access-control-attacks","title":"Examples of Smart Contracts That Fell Victim to Improper Access Control Attacks:","text":"<ul> <li>HospoWise Hack Analysis</li> <li>LAND NFT Hack Analysis</li> </ul>","tags":[]},{"location":"SCSVS/01-Frontispiece/","title":"Frontispiece","text":"","tags":[]},{"location":"SCSVS/01-Frontispiece/#about-the-standard","title":"About the Standard","text":"<p>The Smart Contract Security Verification Standard (SCSVS) is a list of specific security requirements or tests for smart contracts, primarily written in Solidity and deployed on EVM-based blockchains. These requirements are intended to be used by architects, developers, testers, security professionals, tool vendors, and consumers to define, build, test, and verify secure smart contracts, decentralized applications (dApps) and blockchain protocols. The standard promotes best practices for ensuring the security and integrity of smart contracts and decentralized finance (DeFi) systems.</p>","tags":[]},{"location":"SCSVS/01-Frontispiece/#copyright-and-license","title":"Copyright and License","text":"<p>Version 0.0.1 (Bleeding Edge version), 2024</p> <p></p> <p>Copyright \u00a9 2008-2024 The OWASP Foundation. This document is released under the Creative Commons Attribution-ShareAlike 4.0 International License. For any reuse or distribution, you must make clear to others the license terms of this work.</p>","tags":[]},{"location":"SCSVS/01-Frontispiece/#project-leads","title":"Project Leads","text":"","tags":[]},{"location":"SCSVS/01-Frontispiece/#shashank-credshields","title":"Shashank (CredShields)","text":"","tags":[]},{"location":"SCSVS/01-Frontispiece/#major-contributors-and-reviewers","title":"Major Contributors and Reviewers","text":"","tags":[]},{"location":"SCSVS/01-Frontispiece/#pratik-lagaskar","title":"Pratik Lagaskar","text":"","tags":[]},{"location":"SCSVS/01-Frontispiece/#nehal-pillai","title":"Nehal Pillai","text":"","tags":[]},{"location":"SCSVS/01-Frontispiece/#aditya-dixit","title":"Aditya Dixit","text":"<p>If a credit is missing from the 0.0.1 credit list above, please log a ticket at GitHub to be recognized in future 0.x updates.</p> <p>The Smart Contract Security Verification Standard (SCSVS) is built upon the initial research performed into smart contract security by various blockchain security experts. Much of the concept, structure, boilerplate, and tooling for the SCSVS has been adapted from the OWASP ASVS project. We extend our gratitude to all those previously involved in the OWASP ASVS for their contributions.</p>","tags":[]},{"location":"SCSVS/01-Frontispiece/#major-supporter-and-sponsor","title":"Major Supporter and Sponsor","text":"<p>This initiative would not have been possible without the support of our sponsor and the resources they have provided. We would like to express our gratitude to the following for their support.</p>","tags":[]},{"location":"SCSVS/01-Frontispiece/#credshields","title":"CredShields","text":"<p>The OWASP SCSVS project was initiated to share the knowledge gained from the CredShields Security Team's research into Smart Contract security while developing SolidityScan.com, an AI-powered vulnerability scanner for Smart Contracts. We extend our gratitude to CredShields for their efforts in defining the initial requirements and founding this project.</p>","tags":[]},{"location":"SCSVS/02-Preface/","title":"Preface","text":"<p>Welcome to the alpha release of the OWASP Smart Contract Security Verification Standard (SCSVS), which serves as a framework for assessing the security of smart contracts built on Ethereum Virtual Machine (EVM)-based blockchains, specifically those developed using Solidity.</p> <p>Smart contracts are autonomous programs that execute on decentralized blockchain networks, facilitating a wide range of applications, including decentralized finance (DeFi), governance systems, and tokenized assets. However, the immutability and high-value nature of blockchain ecosystems introduce unique risks and challenges. This makes security in smart contract development not only critical but also highly specialized.</p> <p>The SCSVS aims to provide comprehensive, actionable guidelines that support developers, auditors, security professionals, and architects in building and maintaining secure smart contracts, particularly within the Solidity ecosystem on EVM-based blockchains. It seeks to address common and emerging vulnerabilities, such as reentrancy attacks, integer overflows/underflows, gas optimization issues, and economic attacks\u2014all of which pose significant risks to smart contract security and user trust.</p> <p>This alpha release is the result of a collaborative effort by professionals and experts across various sectors, including blockchain security, financial technology, and decentralized application (dApp) development. The SCSVS is designed to offer flexible and evolving guidance for securing smart contracts, addressing both functional and non-functional security aspects.</p>","tags":[]},{"location":"SCSVS/02-Preface/#scope-and-purpose","title":"Scope and Purpose","text":"<p>The SCSVS provides detailed verification requirements that focus on the design, implementation, and testing phases of smart contract development. It seeks to guide stakeholders through:</p> <ul> <li>Designing with security in mind: Ensuring that security is a core principle during the planning stages of smart contract development.</li> <li>Implementing secure coding practices: Emphasizing Solidity-specific security measures to mitigate risks inherent to the EVM environment.</li> <li>Auditing and Testing: Offering best practices for conducting rigorous security audits, penetration testing, and ongoing monitoring of smart contracts once deployed.</li> </ul> <p>This standard is particularly relevant for developers who work on DeFi protocols, token contracts, decentralized exchanges (DEXs), and any application that interacts with assets or governance in a decentralized manner. Its guidelines are aligned with the broader needs of the Ethereum and EVM-based blockchain ecosystems, though many principles apply to other smart contract platforms as well.</p>","tags":[]},{"location":"SCSVS/02-Preface/#a-collaborative-effort","title":"A Collaborative Effort","text":"<p>The security challenges facing smart contract developers are constantly evolving, as adversaries seek new ways to exploit weaknesses in decentralized systems. The SCSVS alpha release is designed to be a starting point, and we openly invite contributions from the community to help expand, refine, and adapt these guidelines.</p> <p>We understand that no security standard can be entirely comprehensive, especially in the dynamic field of blockchain technology, which is rapidly advancing. The aim is to foster collaboration and continuous improvement. Your feedback and active participation will be invaluable in ensuring that the SCSVS remains practical, effective, and up to date with emerging threats and technologies.</p>","tags":[]},{"location":"SCSVS/02-Preface/#looking-ahead","title":"Looking Ahead","text":"<p>The OWASP Smart Contract Security Verification Standard is not a final document. This alpha release is the foundation for a living standard that will grow and adapt with the needs of the community and advances in smart contract development. We encourage the community to engage actively with this project\u2014whether by contributing ideas, identifying gaps, or proposing enhancements.</p> <p>In the spirit of OWASP\u2019s mission, this standard seeks to improve the security posture of the smart contract ecosystem, safeguarding both developers and users alike. We sincerely thank all contributors, and we look forward to your continued support in shaping the future of secure smart contract development.</p> <p>Together, we can build a safer decentralized future.</p>","tags":[]},{"location":"SCSVS/03-Using-SCSVS/","title":"Utilizing the SCSVS","text":"<p>The OWASP Smart Contract Security Verification Standard (SCSVS) serves several key purposes:</p> <ul> <li> <p>Assisting Development Teams: Guide smart contract developers in designing, implementing, and maintaining secure decentralized applications (dApps) and contracts, particularly on EVM-based blockchains.</p> </li> <li> <p>Framework for Security Teams: Assist security professionals in setting requirements, conducting security audits, and performing penetration tests against smart contract systems to ensure they meet robust security standards.</p> </li> <li> <p>Aligning Security Benchmarks: Establish a common security framework that can be adopted by blockchain platforms, vendors, developers, and clients regarding security expectations in smart contracts and decentralized applications.</p> </li> </ul>","tags":[]},{"location":"SCSVS/03-Using-SCSVS/#security-verification-layers","title":"Security Verification Layers","text":"<p>The SCSVS categorizes security verification into three distinct levels, each aimed at different levels of security assurance in smart contract development and deployment:</p> <ol> <li> <p>SCSVS Level 1 - Basic Security: This level is designed for smart contracts with lower security risks. It focuses on fundamental security controls, ensuring baseline protection for any decentralized application.</p> </li> <li> <p>SCSVS Level 2 - Moderate Security: Ideal for smart contracts that handle sensitive data, financial transactions, or are part of a DeFi ecosystem. Level 2 provides a more balanced approach to security, addressing common vulnerabilities like reentrancy attacks, gas inefficiencies, and access control weaknesses.</p> </li> <li> <p>SCSVS Level 3 - High Assurance Security: This level is tailored for mission-critical smart contracts where significant financial assets, governance, or high-value transactions are at stake. Level 3 ensures extensive security measures and covers advanced protections such as formal verification, multi-signature wallets, and decentralized governance.</p> </li> </ol> <p>Each level of the SCSVS provides a detailed set of security requirements, mapping these to essential security features and practices needed to build secure smart contracts. Whether developing, auditing, or deploying smart contracts, the SCSVS offers a clear roadmap to help teams at every stage.</p>","tags":[]},{"location":"SCSVS/03-Using-SCSVS/#assumptions","title":"Assumptions","text":"<p>When utilizing the SCSVS, it's important to consider the following assumptions:</p> <ul> <li> <p>The SCSVS is not a replacement for standard secure development practices such as secure coding or following a Secure Software Development Life Cycle (SSDLC). It should complement these practices by addressing specific security needs for EVM-based smart contracts and decentralized applications.</p> </li> <li> <p>The SCSVS is not intended to replace comprehensive threat modeling or security reviews. It serves as a specialized guide to help identify and mitigate vulnerabilities unique to smart contracts. Employing the SCSVS should enhance, not replace, traditional security risk assessments and penetration tests.</p> </li> </ul> <p>While the SCSVS offers a solid framework for improving the security of smart contracts, it cannot ensure complete security on its own. It should be considered a foundational security standard, with additional protective measures added as necessary to address specific vulnerabilities and evolving threats in decentralized environments.</p>","tags":[]},{"location":"SCSVS/04-Assessment_and_Certification/","title":"Assessment and Certification","text":"","tags":[]},{"location":"SCSVS/04-Assessment_and_Certification/#owasps-stance-on-scsvs-certifications-and-trust-marks","title":"OWASP's Stance on SCSVS Certifications and Trust Marks","text":"<p>OWASP, as a vendor-neutral not-for-profit organization, does not currently certify any vendors, verifiers, or smart contracts.</p> <p>All such assurance assertions, trust marks, or certifications are not officially vetted, registered, or certified by OWASP. Therefore, organizations relying on third-party verification or certifications must carefully evaluate the trust placed in any external entity or trust mark claiming Smart Contract Security Verification Standard (SCSVS) certification.</p> <p>This should not discourage organizations from offering security verification or audit services, as long as they do not claim to provide official OWASP certification.</p>","tags":[]},{"location":"SCSVS/04-Assessment_and_Certification/#guidance-for-certifying-organizations","title":"Guidance for Certifying Organizations","text":"<p>For Smart Contract Security Verification Standard (SCSVS) compliance, an \"open book\" review is recommended, where assessors are granted access to essential resources such as smart contract developers, project documentation, source code, and authenticated blockchain interfaces (including access to the blockchain explorer, transaction logs, and testing environments). It's essential that assessors gain access to at least one account for each user role, particularly if the contract supports permissioned or role-based access.</p> <p>It is important to note that the SCSVS only covers the security requirements specific to EVM-based smart contracts and does not extend to general application security controls (e.g., web interfaces, databases, or other non-blockchain components). Any additional systems or non-blockchain elements should be verified against appropriate security standards, such as the OWASP ASVS.</p>","tags":[]},{"location":"SCSVS/04-Assessment_and_Certification/#certification-reports","title":"Certification Reports","text":"<p>Certification reports should clearly define the scope of the verification, specifying which smart contracts, components, or decentralized applications (dApps) were reviewed, and should list any excluded items from the review. The report should summarize the findings, detailing both passed and failed security controls, alongside guidance on how to remediate any failures.</p> <p>Industry-standard practices for security certification require thorough documentation of the verification process. This should include:</p> <ul> <li>Work papers: Notes and records on each step of the verification process.</li> <li>Screenshots: Evidence of security control tests, such as transaction hashes or audit results.</li> <li>Scripts: Used for testing and replication of discovered issues.</li> <li>Blockchain logs: Detailed records of the verification process including contract interactions, transactions, and gas usage.</li> </ul> <p>Automated tools alone are insufficient to verify SCSVS compliance. All verification reports must provide conclusive, manually validated evidence that demonstrates the thorough and accurate testing of all required controls. In case of disputes, documentation should include adequate evidence to confirm that each control has been appropriately tested and validated.</p>","tags":[]},{"location":"SCSVS/05-SCSVS-ARCH/","title":"S1. Architecture, Design, and Threat Modeling","text":"","tags":[]},{"location":"SCSVS/05-SCSVS-ARCH/#control-objective","title":"Control Objective","text":"<p>Establish a robust architectural foundation and design framework that incorporates threat modeling and security best practices. The goal is to proactively identify and mitigate potential vulnerabilities during the early stages of smart contract development. This ensures the system's scalability, security, and efficiency, while adhering to the principles of secure Solidity coding and deployment.</p>","tags":[]},{"location":"SCSVS/06-SCSVS-CODE/","title":"S2. Policies, Procedures, and Code Management","text":"","tags":[]},{"location":"SCSVS/06-SCSVS-CODE/#control-objective","title":"Control Objective","text":"<p>Ensure that development policies and procedures are in place to promote secure coding practices, thorough code reviews, and comprehensive testing. The aim is to prevent vulnerabilities and enhance the maintainability and clarity of smart contract code.</p>","tags":[]},{"location":"SCSVS/07-SCSVS-GOV/","title":"S3. Business Logic and Economic Security","text":"","tags":[]},{"location":"SCSVS/07-SCSVS-GOV/#control-objective","title":"Control Objective","text":"<p>Ensure that the smart contract's business logic and economic security are resilient against threats related to incentive structures, tokenomics, and logic vulnerabilities. Contracts should prevent abuse, misbehavior, or unexpected behaviors by implementing secure economic models, token handling, and transaction integrity.</p>","tags":[]},{"location":"SCSVS/08-SCSVS-AUTH/","title":"S4. Access Control and Authentication","text":"","tags":[]},{"location":"SCSVS/08-SCSVS-AUTH/#control-objective","title":"Control Objective","text":"<p>Establish robust access control and authentication mechanisms to ensure that only authorized entities can perform sensitive operations within the smart contract. This includes implementing role-based access control (RBAC), secure authorization mechanisms, and decentralized identity management.</p>","tags":[]},{"location":"SCSVS/09-SCSVS-COMM/","title":"S5. Secure Interactions and Communications","text":"","tags":[]},{"location":"SCSVS/09-SCSVS-COMM/#control-objective","title":"Control Objective","text":"<p>Establish secure interaction protocols for smart contracts to ensure safe communication between contracts, external oracles, and cross-chain integrations. This includes managing contract interactions, securing oracle integrations, handling cross-chain interactions, and ensuring the security of bridges.</p>","tags":[]},{"location":"SCSVS/10-SCSVS-CRYPTO/","title":"S6. Cryptographic Practices","text":"","tags":[]},{"location":"SCSVS/10-SCSVS-CRYPTO/#control-objective","title":"Control Objective","text":"<p>Establish secure cryptographic practices for managing keys, verifying signatures, and generating random numbers to protect the integrity and authenticity of transactions and data within smart contracts.</p>","tags":[]},{"location":"SCSVS/11-SCSVS-ORACLE/","title":"S7. Arithmetic and Logic Security","text":"","tags":[]},{"location":"SCSVS/11-SCSVS-ORACLE/#control-objective","title":"Control Objective","text":"<p>Establish secure arithmetic and logic practices to prevent vulnerabilities such as overflow/underflow and ensure the integrity of calculations within smart contracts.</p>","tags":[]},{"location":"SCSVS/12-SCSVS-BLOCK/","title":"S8. Denial of Service (DoS)","text":"","tags":[]},{"location":"SCSVS/12-SCSVS-BLOCK/#control-objective","title":"Control Objective","text":"<p>Establish practices and mechanisms to prevent Denial of Service (DoS) attacks that can disrupt contract functionality and availability.</p>","tags":[]},{"location":"SCSVS/13-SCSVS-BRIDGE/","title":"S9. Blockchain Data and State Management","text":"","tags":[]},{"location":"SCSVS/13-SCSVS-BRIDGE/#control-objective","title":"Control Objective","text":"<p>Establish practices for effective management of blockchain data and state to ensure security, efficiency, and integrity of contract interactions.</p>","tags":[]},{"location":"SCSVS/14-SCSVS-DEFI/","title":"S10. Gas Usage, Efficiency, and Limitations","text":"","tags":[]},{"location":"SCSVS/14-SCSVS-DEFI/#control-objective","title":"Control Objective","text":"<p>Establish practices for optimizing gas usage and efficiency in smart contracts to minimize costs and enhance performance.</p>","tags":[]},{"location":"SCSVS/15-SCSVS-COMP/","title":"S11. Component-Specific Security","text":"","tags":[]},{"location":"SCSVS/15-SCSVS-COMP/#control-objective","title":"Control Objective","text":"<p>Establish security practices and standards for various blockchain components to mitigate specific vulnerabilities associated with tokens, NFTs, vaults, and liquidity pools.</p>","tags":[]},{"location":"SCSVS/16-Appendix-A_Glossary/","title":"Appendix A: Glossary","text":"<ul> <li> <p>Access Control \u2013 Mechanisms that restrict access to a system, application, or data to authorized users or entities. In smart contracts, access control is crucial for ensuring that only permitted users can perform sensitive actions.</p> </li> <li> <p>Arithmetic Operations \u2013 Basic mathematical operations (addition, subtraction, multiplication, division) performed in smart contracts. Proper handling of these operations is vital to prevent overflow and underflow vulnerabilities.</p> </li> <li> <p>Audit \u2013 A systematic examination of smart contracts to evaluate their security, functionality, and compliance with specified requirements. Audits help identify vulnerabilities and ensure adherence to best practices.</p> </li> <li> <p>Bytecode \u2013 The low-level code generated from Solidity (or other high-level languages) that is executed on the Ethereum Virtual Machine (EVM). Understanding bytecode is essential for analyzing contract behavior.</p> </li> <li> <p>Denial of Service (DoS) \u2013 An attack aimed at making a smart contract or service unavailable to its intended users, often by consuming excessive resources or exploiting vulnerabilities to cause failures in execution.</p> </li> <li> <p>Fallback Function \u2013 A default function in a smart contract that is executed when a contract receives Ether without any accompanying data or when a function that doesn\u2019t exist is called. Proper design of fallback functions is important to prevent security issues.</p> </li> <li> <p>Gas \u2013 A unit that measures the computational work required to execute operations on the Ethereum blockchain. Gas fees incentivize miners and limit the complexity of transactions.</p> </li> <li> <p>Gas Limit \u2013 The maximum amount of gas a user is willing to pay for a transaction, impacting the transaction's likelihood of being included in a block.</p> </li> <li> <p>Layer 2 Solutions \u2013 Technologies built on top of existing blockchains to enhance scalability and reduce transaction costs. Examples include state channels and rollups, which alleviate congestion on the main chain.</p> </li> <li> <p>Minting \u2013 The process of creating new tokens or assets and assigning them to a specified address. This operation must be carefully managed to ensure compliance with token standards.</p> </li> <li> <p>Non-Fungible Token (NFT) \u2013 A unique digital asset that represents ownership of a specific item or piece of content, distinguished by its distinct characteristics, making it irreplaceable.</p> </li> <li> <p>Overflows and Underflows \u2013 Vulnerabilities that occur when arithmetic operations exceed the maximum or minimum value of a data type, leading to unexpected behavior. Safe math libraries help prevent these issues.</p> </li> <li> <p>Reentrancy \u2013 A vulnerability where a function makes an external call to another contract before completing its execution, potentially allowing the second contract to manipulate the state of the first contract before it finishes processing.</p> </li> <li> <p>Security Audit \u2013 A comprehensive review and evaluation of a smart contract\u2019s code to identify vulnerabilities, inefficiencies, and compliance with best practices.</p> </li> <li> <p>Smart Contract \u2013 A self-executing contract with the terms of the agreement directly written into code and deployed on a blockchain. Smart contracts automate execution without the need for intermediaries.</p> </li> <li> <p>Token Standard \u2013 Specifications that define how tokens should function on a blockchain. Common standards include ERC20 for fungible tokens, ERC721 for non-fungible tokens, and ERC1155 for multi-token standards.</p> </li> <li> <p>Transaction Confirmation \u2013 The process by which a transaction is validated and recorded on the blockchain. A transaction must be confirmed by miners to be considered final and irreversible.</p> </li> <li> <p>Vulnerability \u2013 A weakness in a smart contract that can be exploited by an attacker, leading to unauthorized access, data breaches, or financial loss.</p> </li> <li> <p>Whitelisting \u2013 A security practice where specific addresses or entities are granted permission to interact with a contract, enhancing access control and mitigating potential attacks.</p> </li> <li> <p>Zero-Knowledge Proofs \u2013 Cryptographic methods that allow one party to prove to another that they know a value without revealing the value itself. This is used to enhance privacy in blockchain transactions.</p> </li> <li> <p>Audit Trail \u2013 A chronological record that tracks the sequence of activities and changes made to a smart contract, providing transparency and accountability.</p> </li> <li> <p>ERC Standards \u2013 Ethereum Request for Comments; a series of technical documents that provide guidelines and specifications for the development of smart contracts and tokens on the Ethereum blockchain.</p> </li> <li> <p>Decentralized Finance (DeFi) \u2013 A financial ecosystem that operates without central authorities, using smart contracts on blockchains to provide financial services like lending, borrowing, and trading.</p> </li> <li> <p>Oracle \u2013 A third-party service that provides external data to smart contracts, enabling them to interact with real-world information such as prices, events, or weather data.</p> </li> <li> <p>Tokenomics \u2013 The study of the economic model and incentive structures behind cryptocurrencies and tokens, including supply, demand, and the distribution of tokens.</p> </li> <li> <p>Gas Optimization \u2013 Techniques and practices aimed at reducing the gas consumption of smart contracts, thereby lowering transaction costs and improving efficiency.</p> </li> <li> <p>Atomic Swap \u2013 A smart contract technology that enables the exchange of one cryptocurrency for another without the need for a trusted third party, ensuring security and trustlessness.</p> </li> <li> <p>Cryptographic Hash Function \u2013 A mathematical algorithm that transforms input data into a fixed-size string of characters, which is unique to each unique input. This function is crucial for ensuring data integrity in blockchain.</p> </li> <li> <p>State Machine \u2013 A model that represents the state of a smart contract and its transitions, allowing for tracking of the current state and the possible changes based on events and actions.</p> </li> <li> <p>Gas Refund \u2013 A mechanism that allows users to recover some of the gas fees spent on certain operations, particularly those that free up storage space on the blockchain.</p> </li> <li> <p>Contract Upgradeability \u2013 The ability to modify or replace a smart contract after its deployment to fix bugs or add new features, often implemented through proxy patterns.</p> </li> <li> <p>Security Vulnerability Disclosure \u2013 A responsible disclosure process where security researchers report vulnerabilities found in smart contracts to the developers, allowing them to address the issues before public knowledge.</p> </li> <li> <p>Interoperability \u2013 The capability of different blockchain networks and smart contracts to communicate and interact with each other, enabling seamless integration of services and assets across platforms.</p> </li> </ul>","tags":[]},{"location":"SCSVS/17-Appendix-B_References/","title":"Appendix B: References","text":"<p>The following OWASP projects are most likely to be useful to users/adopters of this standard:</p>","tags":[]},{"location":"SCSVS/17-Appendix-B_References/#owasp-core-projects","title":"OWASP Core Projects","text":"<ol> <li>OWASP Top 10 Project</li> <li>OWASP Smart Contract Top 10 Project</li> </ol>","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-2/","title":"SCSVS-ARCH-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-2/#s12-proxy-patterns","title":"S1.2 Proxy Patterns","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-2/#control-objective","title":"Control Objective","text":"<p>Ensure that proxy patterns and upgrade mechanisms are implemented securely and managed properly, to mitigate risks during contract upgrades, deprecations, and transitions between contract versions.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-2/#security-verification-requirements","title":"Security Verification Requirements","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-2/#s12a-upgrade-mechanisms","title":"S1.2.A Upgrade Mechanisms","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 R SWE S1.2.A1 Verify that an upgrade mechanism (e.g., proxy pattern) is implemented for the contract. \u2713 \u2713 S1.2.A2 Ensure that the upgrade process includes safeguards against unauthorized upgrades. \u2713 \u2713 S1.2.A3 Check that the upgrade mechanism is documented and reviewed for security. \u2713 \u2713 S1.2.A4 Verify that immutable variables are consistent across implementations during proxy upgrades to prevent misuse. \u2713 S1.2.A5 Verify that <code>selfdestruct</code> and <code>delegatecall</code> in implementation contracts do not introduce vulnerabilities or unexpected behaviors in a proxy setup. \u2713 S1.2.A6 Verify that UUPSUpgradeable contracts are protected against vulnerabilities that may affect uninitialized implementation contracts, ensuring secure upgrade mechanisms. \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-2/#s12b-managing-deprecation","title":"S1.2.B Managing Deprecation","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 R SWE S1.2.B1 Verify that deprecated contract versions are correctly marked and handled. \u2713 S1.2.B2 Ensure that access to deprecated versions is restricted or disabled. \u2713 S1.2.B3 Check that migration paths from deprecated versions to new versions are secure. \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-2/#s12c-transparent-vs-opaque-proxies","title":"S1.2.C Transparent vs. Opaque Proxies","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 R SWE S1.2.C1 Verify whether a transparent or opaque proxy pattern is used and its suitability for the contract. \u2713 \u2713 S1.2.C2 Ensure that the proxy pattern is correctly implemented and does not introduce vulnerabilities. \u2713 \u2713 S1.2.C3 Check that the proxy pattern\u2019s choice is documented and justified. \u2713 \u2713 S1.2.C4 Ensure that uninitialized contracts cannot be taken over by attackers and that initialization functions are secured with the correct modifiers. \u2713 S1.2.C5 Verify that <code>TransparentUpgradeableProxy</code> and similar proxy patterns handle selector clashes and non-decodable calldata correctly to maintain transparency. \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-3/","title":"SCSVS-ARCH-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-3/#s13-threat-modeling","title":"S1.3 Threat Modeling","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-3/#control-objective","title":"Control Objective","text":"<p>Identify, assess, and mitigate security threats for smart contract systems by implementing a thorough threat modeling process, ensuring that risks are minimized and protections are in place for critical contract features.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-3/#security-verification-requirements","title":"Security Verification Requirements","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-3/#s13a-identifying-threats","title":"S1.3.A Identifying Threats","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S1.3.A1 Verify that potential threats are identified and documented. \u2713 \u2713 \u2713 S1.3.A2 Ensure that the threat identification process includes input from security experts. \u2713 \u2713 S1.3.A3 Check that threats are categorized based on their impact and likelihood. \u2713 \u2713 S1.3.A4 Implement protections against front-running in governor proposal creation to prevent attackers from blocking proposals or gaining undue advantages. \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-3/#s13b-assessing-risks","title":"S1.3.B Assessing Risks","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S1.3.B1 Verify that risk assessments are performed for identified threats. \u2713 \u2713 S1.3.B2 Ensure that risks are prioritized based on their potential impact and likelihood. \u2713 \u2713 S1.3.B3 Check that risk assessment results are documented and reviewed. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ARCH-3/#s13c-implementing-mitigations","title":"S1.3.C Implementing Mitigations","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S1.3.C1 Verify that mitigations are implemented for high-priority risks. \u2713 \u2713 S1.3.C2 Ensure that mitigation strategies are documented and tested. \u2713 \u2713 S1.3.C3 Check that the effectiveness of implemented mitigations is reviewed and validated. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-1/","title":"SCSVS-AUTH-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-1/#s41-role-based-access-control-rbac","title":"S4.1 Role-Based Access Control (RBAC)","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-1/#control-objective","title":"Control Objective","text":"<p>Implement role-based access control to manage permissions and ensure that only authorized users can access specific functions. This includes validating identities, applying the least privilege principle, and ensuring appropriate access controls are in place.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-1/#s41a-multi-signature-schemes","title":"S4.1.A Multi-Signature Schemes","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S4.1.A1 Ensure that the visibility modifier for all functions is appropriate, preventing unnecessary exposure of internal functions. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-1/#s41b-identity-verification","title":"S4.1.B Identity Verification","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S4.1.B1 Validate that unexpected addresses do not result in unintended behaviors, particularly when these addresses refer to contracts within the same protocol. \u2713 \u2713 S4.1.B2 Verify that functions like ecrecover handle all potential null addresses properly to avoid vulnerabilities arising from unexpected ecrecover outputs. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-1/#s41c-least-privilege-principle","title":"S4.1.C Least Privilege Principle","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S4.1.C1 Use msg.sender instead of tx.origin for authorization to avoid potential abuse from malicious contracts; include checks like require(tx.origin == msg.sender) to ensure the sender is an EOA. \u2713 \u2713 S4.1.C2 Certain addresses might be blocked or restricted from receiving tokens (e.g., LUSD). Ensure that address restrictions are properly managed and verified. \u2713 \u2713 S4.1.C3 Ensure that Guard\u2019s hooks (e.g., checkTransaction(), checkAfterExecution()) are executed to enforce critical security checks. \u2713 \u2713 S4.1.C4 Ensure that access controls are implemented correctly to determine who can use certain functions, and avoid unauthorized changes or withdrawals. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-2/","title":"SCSVS-AUTH-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-2/#s42-authorization-mechanisms","title":"S4.2 Authorization Mechanisms","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-2/#control-objective","title":"Control Objective","text":"<p>Implement secure authorization mechanisms to safeguard critical functions and sensitive operations, ensuring only authorized entities can perform these actions.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-2/#s42a-secure-access-to-critical-functions","title":"S4.2.A Secure Access to Critical Functions","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S4.2.A1 Verify that the contract uses msg.sender for authorization instead of tx.origin to avoid vulnerabilities related to contracts that forward calls from legitimate users. \u2713 \u2713 S4.2.A2 Implement and verify appropriate access controls for functions that modify contract state or perform sensitive operations to prevent unauthorized access. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-2/#s42b-timed-permissions","title":"S4.2.B Timed Permissions","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S4.2.B1 Ensure that msg.sender validation is properly implemented when using Merkle trees to maintain security and prevent unauthorized access. \u2713 \u2713 S4.2.B2 Use whitelisting to restrict interactions to a specific set of addresses, providing additional security against malicious actors. \u2713 \u2713 S4.2.B3 Ensure that functions modifying the contract state or accessing sensitive operations have proper access controls implemented. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-3/","title":"SCSVS-AUTH-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-3/#s43-decentralized-identity","title":"S4.3 Decentralized Identity","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-3/#control-objective","title":"Control Objective","text":"<p>Implement decentralized identity solutions to ensure secure and reliable identity verification and management while maintaining user privacy.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-3/#s43a-decentralized-identifiers-dids","title":"S4.3.A Decentralized Identifiers (DIDs)","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S4.3.A1 Verify that the smart contract for handling DIDs adheres to the latest standards and best practices for decentralized identity management. \u2713 \u2713 S4.3.A2 Ensure that the DID management contract includes mechanisms to prevent unauthorized modifications and ensure the integrity of DID records. \u2713 \u2713 S4.3.A3 Check that DID documents managed by the smart contract are securely stored and can be retrieved in a decentralized manner. \u2713 \u2713 S4.3.A4 Verify that the smart contract supports reliable DID resolution and includes mechanisms for handling conflicts and updates. \u2713 \u2713 S4.3.A5 Ensure that the smart contract maintains the privacy and confidentiality of DID-related information throughout its lifecycle. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-AUTH-3/#s43b-verifiable-credentials","title":"S4.3.B Verifiable Credentials","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S4.3.B1 Verify that the smart contract manages verifiable credentials in a way that ensures their authenticity and integrity through cryptographic proofs. \u2713 \u2713 S4.3.B2 Ensure that the issuance process of verifiable credentials by the smart contract includes proper identity verification and validation procedures. \u2713 \u2713 S4.3.B3 Check that the smart contract supports cryptographic proofs to verify the validity of credentials without disclosing sensitive information. \u2713 \u2713 S4.3.B4 Verify that the smart contract includes a secure process for revoking verifiable credentials when necessary. \u2713 \u2713 S4.3.B5 Ensure that the smart contract\u2019s handling of verifiable credentials complies with relevant standards and best practices for secure credential management. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-1/","title":"SCSVS-BLOCK-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-1/#s81-gas-limits","title":"S8.1 Gas Limits","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-1/#control-objective","title":"Control Objective","text":"<p>Ensure that contract design and function implementations are efficient in gas usage to mitigate risks associated with out-of-gas errors and related vulnerabilities.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-1/#s81a-efficient-loop-and-function-design","title":"S8.1.A Efficient Loop and Function Design","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S8.1.A1 Ensure that contracts are protected against insufficient gas griefing attacks by carefully managing gas consumption in critical functions. \u2713 \u2713 S8.1.A2 Ensure that systems like the RocketDepositPool contract handle failures in functions like burn() gracefully. \u2713 \u2713 S8.1.A3 Verify that gas usage in functions and loops is efficient to avoid out-of-gas errors. \u2713 \u2713 S8.1.A4 Implement mechanisms to prevent denial of service attacks due to block gas limits, ensuring that transactions or operations do not exceed the gas limit constraints. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-1/#s81b-fallback-mechanisms","title":"S8.1.B Fallback Mechanisms","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S8.1.B1 Ensure that try/catch blocks are provided with adequate gas to avoid failures and unexpected behavior in case of errors. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-2/","title":"SCSVS-BLOCK-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-2/#s82-resilience-against-resource-exhaustion","title":"S8.2 Resilience Against Resource Exhaustion","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-2/#control-objective","title":"Control Objective","text":"<p>Implement strategies to protect contracts from resource exhaustion attacks that can lead to DoS scenarios.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-BLOCK-2/#s82a-rate-limiting","title":"S8.2.A Rate Limiting","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S8.2.A1 Avoid using blocking mechanisms that could lead to a Denial-of-Service (DoS) attack. \u2713 \u2713 S8.2.A2 Protect against potential DoS in functions like supportsERC165InterfaceUnchecked() by handling excessive data queries efficiently. \u2713 \u2713 S8.2.A3 Ensure that assertions do not lead to denial of service or unexpected contract reverts, especially in scenarios where conditions are not met. \u2713 \u2713 S8.2.A4 Verify that return values from external function calls are checked to prevent issues related to unchecked return values, which could lead to unexpected behavior. \u2713 \u2713 S8.2.A5 Ensure that contract functions are protected against denial of service due to unexpected reverts by handling all possible error conditions appropriately. \u2713 \u2713 S8.2.A6 Ensure that functions such as supportsERC165InterfaceUnchecked() in ERC165Checker.sol handle large data queries efficiently to avoid excessive resource consumption. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-1/","title":"SCSVS-BRIDGE-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-1/#s91-state-management","title":"S9.1 State Management","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-1/#control-objective","title":"Control Objective","text":"<p>Ensure efficient and secure handling of state within smart contracts to prevent data corruption and unexpected behavior.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-1/#s91a-efficient-and-secure-state-handling","title":"S9.1.A Efficient and Secure State Handling","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.1.A1 Ensure that payable functions in contracts handle all ETH passed in msg.value and provide a mechanism for withdrawal to avoid ETH being locked in the contract. \u2713 \u2713 S9.1.A2 Verify that deleting a variable of a nested structure correctly resets all nested level fields to default values to avoid unexpected behavior. \u2713 \u2713 S9.1.A3 Verify that storage structs and arrays with types shorter than 32 bytes are handled correctly, avoiding data corruption when encoded directly from storage using the experimental ABIEncoderV2. \u2713 \u2713 S9.1.A4 Verify that storage arrays containing structs or other statically-sized arrays are properly read and encoded in external function calls to prevent data corruption. \u2713 \u2713 S9.1.A5 Ensure that copying bytes arrays from memory or calldata to storage handles empty arrays correctly, avoiding data corruption when the target array's length is increased subsequently without storing new data. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-1/#s91b-state-channels","title":"S9.1.B State Channels","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.1.B1 Verify that global state updates are correctly handled when working with memory copies to ensure accurate state management. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-2/","title":"SCSVS-BRIDGE-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-2/#s92-data-privacy","title":"S9.2 Data Privacy","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-2/#control-objective","title":"Control Objective","text":"<p>Ensure that sensitive data within contracts is secured and that privacy measures are effectively implemented.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-2/#s92a-ensuring-sensitive-data-is-secure","title":"S9.2.A Ensuring Sensitive Data is Secure","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.2.A1 Ensure that private data marked in contracts is protected from unauthorized access through blockchain analysis. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-2/#s92b-zero-knowledge-proofs","title":"S9.2.B Zero-Knowledge Proofs","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.2.B1 Verify that zero-knowledge proofs are implemented to ensure privacy without revealing any underlying data. \u2713 \u2713 S9.2.B2 Validate the correctness of proof generation and verification processes to prevent any potential leaks or exploits. \u2713 \u2713 S9.2.B3 Ensure that zero-knowledge proofs are integrated seamlessly with the blockchain to maintain performance and security. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-2/#s92c-private-transactions","title":"S9.2.C Private Transactions","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.2.C1 Verify that private transaction mechanisms (e.g., zk-SNARKs, zk-STARKs) are correctly implemented to ensure confidentiality of transaction details. \u2713 \u2713 S9.2.C2 Ensure that private transactions maintain the integrity and validity of the blockchain. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-2/#s92d-confidential-contracts","title":"S9.2.D Confidential Contracts","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.2.D1 Verify that confidential contracts use cryptographic techniques to hide contract state and execution details from unauthorized parties. \u2713 \u2713 S9.2.D2 Ensure that only parties with appropriate permissions can access data within confidential contracts. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-3/","title":"SCSVS-BRIDGE-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-3/#s93-event-logging","title":"S9.3 Event Logging","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-3/#control-objective","title":"Control Objective","text":"<p>Implement transparent and secure logging practices to ensure traceability and detect unauthorized changes.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-3/#s93a-transparent-and-secure-logging-practices","title":"S9.3.A Transparent and Secure Logging Practices","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.3.A1 Verify that events are emitted properly, especially for critical changes to ensure traceability and transparency. \u2713 \u2713 S9.3.A2 Verify that the contract\u2019s event logging correctly reflects critical changes to ensure transparency and traceability. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-3/#s93b-log-analysis","title":"S9.3.B Log Analysis","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.3.B1 Implement tools and processes for analyzing event logs to detect anomalies or unauthorized changes. \u2713 \u2713 S9.3.B2 Set up alerts for unusual patterns or discrepancies in logged events. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-4/","title":"SCSVS-BRIDGE-4","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-4/#s94-decentralized-storage","title":"S9.4 Decentralized Storage","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-4/#control-objective","title":"Control Objective","text":"<p>Ensure data integrity, security, and availability for data stored in decentralized storage solutions.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-BRIDGE-4/#s94a-ipfs-arweave","title":"S9.4.A IPFS, Arweave","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S9.4.A1 Ensure that data stored on decentralized platforms like IPFS or Arweave is encrypted and access-controlled. \u2713 \u2713 S9.4.A2 Implement mechanisms for data redundancy and backup to ensure data availability. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-1/","title":"SCSVS-CODE-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-1/#s21-development-policies","title":"S2.1 Development Policies","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-1/#control-objective","title":"Control Objective","text":"<p>Establish and enforce secure coding standards and review processes to minimize vulnerabilities and ensure best practices are followed throughout the development lifecycle.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-1/#s21a-secure-coding-standards","title":"S2.1.A Secure Coding Standards","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S2.1.A1 Ensure that developers do not use outdated compiler versions and adhere to the latest compiler recommendations. \u2713 \u2713 S2.1.A2 Verify that deprecated functions are not used in the code. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-1/#s21b-code-review-processes","title":"S2.1.B Code Review Processes","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S2.1.B1 Verify that all smart contract code changes are reviewed by at least two independent developers with expertise in smart contract security before merging to the main branch. \u2713 \u2713 S2.1.B2 Ensure that code reviews of smart contracts involve automated static analysis tools specifically designed for smart contracts, and that all flagged issues are addressed or documented prior to merging. \u2713 \u2713 S2.1.B3 Check that the code review process for smart contracts includes a thorough analysis for vulnerabilities such as reentrancy attacks, integer overflows, and improper access control. \u2713 \u2713 S2.1.B4 Verify that code reviews include adherence to smart contract development standards, such as the use of safe math libraries and secure design patterns. \u2713 \u2713 S2.1.B5 Ensure that code reviews incorporate a checklist of common smart contract vulnerabilities, and that each item on the list is addressed before code is approved. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-2/","title":"SCSVS-CODE-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-2/#s22-code-clarity","title":"S2.2 Code Clarity","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-2/#control-objective","title":"Control Objective","text":"<p>Promote code clarity and maintainability through thorough documentation, logical structure, and adherence to consistent coding standards, enabling easier understanding and modification by developers.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-2/#s22a-readability-and-documentation","title":"S2.2.A Readability and Documentation","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S2.2.A1 Ensure that all smart contract functions and critical code blocks are documented with clear comments that explain their purpose and logic. \u2713 \u2713 S2.2.A2 Verify that the structure of the smart contract is logical and organized to facilitate understanding and modification by other developers. \u2713 \u2713 S2.2.A3 Check that the smart contract documentation includes a high-level overview of its functionality, usage instructions, and any dependencies on other contracts or systems. \u2713 \u2713 S2.2.A4 Ensure that smart contract code follows consistent naming conventions for variables, functions, and contract names to improve readability and maintainability. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-2/#s22b-code-linting-and-formatting-tools","title":"S2.2.B Code Linting and Formatting Tools","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S2.2.B1 Ensure that a code linting tool specific to smart contracts is integrated into the development workflow to enforce coding standards and style guidelines. \u2713 \u2713 S2.2.B2 Verify that all smart contract code passes linting checks without errors or warnings before being committed to the repository. \u2713 \u2713 S2.2.B3 Check that code formatting tools are applied to maintain consistent indentation, spacing, and line breaks in smart contract code. \u2713 \u2713 S2.2.B4 Ensure that the linting and formatting configurations are reviewed and updated regularly to reflect new best practices and emerging issues in smart contract development. \u2713 \u2713 S2.2.B5 Verify that the linting and formatting tools are compatible with the development environment and do not introduce unintended changes to the smart contract code. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-3/","title":"SCSVS-CODE-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-3/#s23-test-coverage","title":"S2.3 Test Coverage","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-3/#control-objective","title":"Control Objective","text":"<p>Ensure comprehensive test coverage for smart contracts, encompassing unit tests, integration tests, and security-specific tests, to identify vulnerabilities and maintain code quality throughout development.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-3/#s23a-unit-tests-integration-tests-automated-testing","title":"S2.3.A Unit Tests, Integration Tests, Automated Testing","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S2.3.A1 Verify that all critical functions in the smart contract have comprehensive unit tests that cover both typical and edge cases. \u2713 \u2713 S2.3.A2 Ensure that integration tests are implemented to validate the interactions between the smart contract and other contracts or external systems. \u2713 \u2713 S2.3.A3 Check that automated tests are set up to run on each code commit to detect regressions and maintain continuous quality of the smart contract. \u2713 \u2713 S2.3.A4 Verify that test coverage tools are used to monitor and achieve a high percentage of coverage for the smart contract code. \u2713 \u2713 S2.3.A5 Ensure that the testing framework supports mocking and simulating external dependencies to effectively isolate and test specific functionalities of the smart contract. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CODE-3/#s23b-security-specific-tests","title":"S2.3.B Security-Specific Tests","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S2.3.B1 Verify that the test suite for the smart contract includes security-specific tests designed to identify vulnerabilities such as reentrancy, integer overflows, and improper access controls. \u2713 \u2713 S2.3.B2 Ensure that the security tests validate proper implementation of access controls and permissions within the smart contract. \u2713 \u2713 S2.3.B3 Check that fuzz testing is conducted to uncover unexpected behaviors and potential security issues under various input scenarios. \u2713 \u2713 S2.3.B4 Verify that the smart contract's response to invalid inputs and edge cases is thoroughly tested to ensure robust security measures are in place. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-1/","title":"SCSVS-COMM-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-1/#s51-contract-interactions","title":"S5.1 Contract Interactions","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-1/#control-objective","title":"Control Objective","text":"<p>Ensure that all interactions between contracts are secure, minimizing risks associated with external calls, maintaining a minimal trusted surface, and handling errors appropriately.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-1/#s51a-secure-message-passing","title":"S5.1.A Secure Message Passing","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S5.1.A1 Ensure that calls to inherited functions from LzApp use recommended approaches (e.g., _lzSend) to avoid vulnerabilities associated with direct calls to lzEndpoint.send. \u2713 \u2713 S5.1.A2 Ensure that when interacting with external contracts, the msg.sender remains consistent to avoid security issues related to unexpected changes in sender context. \u2713 \u2713 S5.1.A3 Manage untrusted external contract calls to prevent unexpected results such as multiple withdrawals or out-of-order events. \u2713 \u2713 S5.1.A4 Missing verification of interacting pools can introduce risks. Ensure that all pools are properly verified before interaction to prevent potential security issues. \u2713 \u2713 S5.1.A5 Verify that the low-level .delegatecall() is properly managed, acknowledging that it converts the return value to a Boolean without providing the execution outcome. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-1/#s51b-minimal-trusted-surface","title":"S5.1.B Minimal Trusted Surface","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S5.1.B1 Verify that the smart contract minimizes its trusted surface by only interacting with other contracts and systems through well-defined and limited interfaces. \u2713 \u2713 S5.1.B2 Ensure that the smart contract includes checks to validate the trustworthiness and authenticity of interacting parties before executing sensitive operations. \u2713 \u2713 S5.1.B3 Check that the smart contract's interactions are designed to avoid dependencies on external data or contracts that could compromise security. \u2713 \u2713 S5.1.B4 Verify that the contract handles failures or unexpected behaviors from external interactions gracefully to avoid cascading failures. \u2713 \u2713 S5.1.B5 Ensure that interactions with other contracts are monitored and audited to detect and address any unusual or unauthorized activities. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-2/","title":"SCSVS-COMM-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-2/#s52-oracle-integrations","title":"S5.2 Oracle Integrations","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-2/#control-objective","title":"Control Objective","text":"<p>Ensure that oracle integrations provide secure, reliable, and tamper-proof data feeds while maintaining data integrity and handling failures appropriately.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-2/#s52a-secure-data-feeds","title":"S5.2.A Secure Data Feeds","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S5.2.A1 Verify that the smart contract uses oracles that provide secure and tamper-proof data feeds, including checks for data integrity and authenticity. \u2713 \u2713 S5.2.A2 Ensure that the smart contract validates the data received from oracles to prevent malicious or incorrect data from affecting contract operations. \u2713 \u2713 S5.2.A3 Check that the smart contract includes fallback mechanisms in case of oracle failure or unreliable data. \u2713 \u2713 S5.2.A4 Verify that the integration with oracles follows best practices for data security, including encryption and secure communication channels. \u2713 \u2713 S5.2.A5 Ensure that the smart contract's oracle integration is designed to handle any potential discrepancies or conflicts in data from multiple sources. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-2/#s52b-decentralized-oracles","title":"S5.2.B Decentralized Oracles","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S5.2.B1 Verify that the smart contract uses decentralized oracles to enhance data reliability and prevent single points of failure or manipulation. \u2713 \u2713 S5.2.B2 Ensure that the smart contract includes mechanisms to validate the consensus or majority opinion of decentralized oracles before taking actions based on their data. \u2713 \u2713 S5.2.B3 Check that the smart contract accounts for potential latency or delays in data from decentralized oracles to maintain operational reliability. \u2713 \u2713 S5.2.B4 Verify that the smart contract includes checks to prevent manipulation or collusion among decentralized oracles. \u2713 \u2713 S5.2.B5 Ensure that the decentralized oracle integration adheres to standards for security and reliability in multi-oracle environments. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-3/","title":"SCSVS-COMM-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-3/#s53-cross-chain-interactions","title":"S5.3 Cross-Chain Interactions","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-3/#control-objective","title":"Control Objective","text":"<p>Ensure secure handling of external calls and atomic swaps during cross-chain interactions to maintain operational reliability and prevent fraud.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-3/#s53a-handling-external-calls-securely","title":"S5.3.A Handling External Calls Securely","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S5.3.A1 Ensure that parameters for Chainlink VRF (Verifiable Random Function) are thoroughly validated to prevent the fulfillRandomWord function from returning incorrect values instead of reverting. \u2713 \u2713 S5.3.A2 Implement robust security checks for cross-chain messaging to ensure correct permissions and intended functionality. \u2713 \u2713 S5.3.A3 Verify that contracts created using the CREATE opcode handle block reorganizations securely to prevent unexpected eliminations. \u2713 \u2713 S5.3.A4 Ensure robust cross-chain messaging security checks to prevent replay attacks where signatures valid on one chain might be exploited on another. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-3/#s53b-atomic-swaps","title":"S5.3.B Atomic Swaps","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S5.3.B1 Verify that the smart contract supports atomic swaps with robust mechanisms to ensure that swaps are completed successfully or not executed at all. \u2713 \u2713 S5.3.B2 Ensure that the smart contract includes checks to validate the atomic swap conditions and prevent partial or fraudulent swaps. \u2713 \u2713 S5.3.B3 Check that the smart contract handles potential failures or disputes in atomic swaps securely and fairly. \u2713 \u2713 S5.3.B4 Verify that the atomic swap functionality is tested thoroughly to cover various scenarios and edge cases. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-4/","title":"SCSVS-COMM-4","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-4/#s54-bridges","title":"S5.4 Bridges","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-4/#control-objective","title":"Control Objective","text":"<p>Ensure the security of cross-chain transactions by implementing robust validation and verification mechanisms to prevent fraud and maintain data integrity.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMM-4/#s54a-cross-chain-transaction-security","title":"S5.4.A Cross-Chain Transaction Security","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S5.4.A1 Verify that the smart contract for cross-chain transactions includes robust mechanisms for verifying and validating transactions across different chains. \u2713 \u2713 S5.4.A2 Ensure that the smart contract prevents double-spending and replay attacks in cross-chain transactions by implementing appropriate security checks. \u2713 \u2713 S5.4.A3 Check that the cross-chain transaction contract handles communication and data integrity securely between different blockchain networks. \u2713 \u2713 S5.4.A4 Verify that the smart contract includes fallback and recovery mechanisms for handling failures or inconsistencies in cross-chain transactions. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-1/","title":"SCSVS-COMP-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-1/#s111-tokens-erc20-erc721-erc1155","title":"S11.1 Tokens (ERC20, ERC721, ERC1155)","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-1/#control-objective","title":"Control Objective","text":"<p>Ensure secure implementation and management of token standards to prevent vulnerabilities.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-1/#s111a-secure-implementation-and-management","title":"S11.1.A Secure Implementation and Management","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S11.1.A1 Verify that the totalSupply value is consistent during token minting operations, ensuring that callbacks do not result in incorrect values. \u2713 \u2713 S11.1.A2 Some tokens have multiple addresses associated with them, which can introduce vulnerabilities. Ensure all token addresses are managed and verified securely to avoid related risks. \u2713 \u2713 S11.1.A3 Verify that tokens handle zero amount transfers properly to prevent issues in integrations and operations. \u2713 \u2713 S11.1.A4 Verify that tokens handle zero amount transfers properly to prevent issues in integrations and operations. \u2713 \u2713 S11.1.A5 Some tokens revert on the transfer of a zero amount, which can cause issues in certain integrations and operations. Ensure compatibility with such tokens to avoid integration problems. \u2713 \u2713 S11.1.A6 Not all ERC20 tokens comply with the EIP20 standard; some may not return a boolean flag or revert on failure. Verify compliance with the ERC20 standard to avoid compatibility issues. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-2/","title":"SCSVS-COMP-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-2/#s112-nft-security","title":"S11.2 NFT Security","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-2/#control-objective","title":"Control Objective","text":"<p>Implement best practices for non-fungible tokens to safeguard against vulnerabilities.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-2/#s112a-best-practices-for-non-fungible-tokens","title":"S11.2.A Best Practices for Non-Fungible Tokens","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S11.2.A1 Implement standards and best practices for NFT creation, management, and transfer to prevent common vulnerabilities. \u2713 \u2713 S11.2.A2 Ensure proper metadata integrity and prevent unauthorized minting or transfers. \u2713 \u2713 S11.2.A3 Safeguard against potential exploits related to royalty payments or token burns. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-3/","title":"SCSVS-COMP-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-3/#s113-vaults","title":"S11.3 Vaults","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-3/#control-objective","title":"Control Objective","text":"<p>Ensure secure asset storage and management within vault systems.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-3/#s113a-secure-asset-storage-and-management","title":"S11.3.A Secure Asset Storage and Management","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S11.3.A1 Address potential overhead issues associated with withdrawing stETH or wstETH, including queue times and withdrawal limits, to ensure smooth operations. \u2713 \u2713 S11.3.A2 Handle conversions between stETH and wstETH carefully to avoid potential issues due to the rebasing nature of stETH. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-4/","title":"SCSVS-COMP-4","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-4/#s114-liquid-staking","title":"S11.4 Liquid Staking","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-4/#control-objective","title":"Control Objective","text":"<p>Ensure secure staking mechanisms to protect users' assets.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-4/#s114a-secure-staking-mechanisms","title":"S11.4.A Secure Staking Mechanisms","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S11.4.A1 Verify that mechanisms for detaching sfrxETH from frxETH are robust to prevent discrepancies and ensure accurate reward transfers, particularly when controlled by centralized entities. \u2713 \u2713 S11.4.A2 Monitor potential future changes in the sfrxETH/ETH rate and ensure users are adequately forewarned to mitigate risks associated with rate fluctuations. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-5/","title":"SCSVS-COMP-5","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-5/#s115-liquidity-pools-amms","title":"S11.5 Liquidity Pools (AMMs)","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-5/#control-objective","title":"Control Objective","text":"<p>Establish security measures in automated market makers.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-5/#s115a-security-in-automated-market-makers","title":"S11.5.A Security in Automated Market Makers","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S11.5.A1 [WIP/Will be removed]","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-6/","title":"SCSVS-COMP-6","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-6/#s116-uniswap-v4-hook","title":"S11.6 Uniswap V4 Hook","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-6/#control-objective","title":"Control Objective","text":"<p>Ensure secure integration and customization of Uniswap components.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-COMP-6/#s116a-secure-integration-and-customization","title":"S11.6.A Secure Integration and Customization","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S11.6.A1 Verify the correct usage of Uniswap\u2019s TickMath and FullMath libraries to ensure proper handling of unchecked arithmetic operations, adhering to version-specific Solidity considerations. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-1/","title":"SCSVS-CRYPTO-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-1/#s61-key-management","title":"S6.1 Key Management","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-1/#control-objective","title":"Control Objective","text":"<p>Ensure secure handling and storage of private keys and implement robust signature verification processes to prevent unauthorized access and actions.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-1/#s61a-secure-handling-and-storage-of-private-keys","title":"S6.1.A Secure Handling and Storage of Private Keys","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S6.1.A1 Verify that the ecrecover() function handles malformed inputs correctly and does not return invalid data. \u2713 \u2713 S6.1.A2 Ensure that signature verification mechanisms are robust against signature malleability and replay attacks, particularly by using nonces or hashed messages rather than relying solely on the signature itself. \u2713 \u2713 S6.1.A3 Verify that SignatureChecker.isValidSignatureNow handles edge cases properly and does not revert unexpectedly, considering the ABI decoding issues introduced in Solidity 0.8. \u2713 \u2713 S6.1.A4 Ensure that all signatures are checked thoroughly to prevent unauthorized transactions or actions due to weak or improperly managed signature validation. \u2713 \u2713 S6.1.A5 Validate that signature protection mechanisms are up-to-date and resistant to signature malleability attacks by avoiding outdated libraries and practices. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-1/#s61b-multi-signature-wallets","title":"S6.1.B Multi-Signature Wallets","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S6.1.B1 Verify that multi-signature wallets require a predefined number of signatures before executing any transaction. \u2713 \u2713 S6.1.B2 Ensure that the multi-signature wallet logic is resistant to replay attacks. \u2713 \u2713 S6.1.B3 Verify that the process of adding or removing signatories from the multi-signature wallet is secure and controlled. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-2/","title":"SCSVS-CRYPTO-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-2/#s62-signature-verification","title":"S6.2 Signature Verification","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-2/#control-objective","title":"Control Objective","text":"<p>Implement cryptographic techniques that ensure the secure verification of signatures and compliance with standards to maintain the integrity of authenticated transactions.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-2/#s62a-cryptographic-techniques-for-authentication","title":"S6.2.A Cryptographic Techniques for Authentication","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S6.2.A1 Ensure that cryptographic algorithms used for signature verification are secure and follow best practices. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-2/#s62b-standard-compliance-eg-eip-712","title":"S6.2.B Standard Compliance (e.g., EIP-712)","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S6.2.B1 Verify that ECDSA signature handling functions, such as ECDSA.recover and ECDSA.tryRecover, properly manage signature formats to prevent signature malleability, especially when handling both traditional 65-byte and EIP-2098 compact signatures. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-3/","title":"SCSVS-CRYPTO-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-3/#s63-secure-random-number-generation","title":"S6.3 Secure Random Number Generation","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-3/#control-objective","title":"Control Objective","text":"<p>Implement best practices for secure random number generation to ensure unpredictability and resistance against manipulation.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-CRYPTO-3/#s63a-best-practices-for-randomness","title":"S6.3.A Best Practices for Randomness","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S6.3.A1 Ensure that random number generation follows best practices and uses secure sources of entropy. \u2713 \u2713 S6.3.A2 Verify that any random number generation is resistant to manipulation and prediction. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-1/","title":"SCSVS-DEFI-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-1/#s101-optimizing-gas-usage","title":"S10.1 Optimizing Gas Usage","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-1/#control-objective","title":"Control Objective","text":"<p>Ensure gas consumption is minimized to promote cost-effective execution of smart contracts.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-1/#s101a-understanding-gas-costs-and-limits","title":"S10.1.A Understanding Gas Costs and Limits","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S10.1.A1 Implement best practices for optimizing gas consumption to ensure cost-effective and efficient contract execution. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-1/#s101b-gas-estimation-tools","title":"S10.1.B Gas Estimation Tools","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S10.1.B1 Verify that transaction confirmation numbers are chosen appropriately to mitigate risks related to chain re-orgs and ensure reliable contract operation. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-2/","title":"SCSVS-DEFI-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-2/#s102-efficient-contract-design","title":"S10.2 Efficient Contract Design","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-2/#control-objective","title":"Control Objective","text":"<p>Design contracts efficiently to enhance performance and reduce gas costs through optimal architecture.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-DEFI-2/#s102a-layer-2-solutions","title":"S10.2.A Layer 2 Solutions","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S10.2.A1 Explore and integrate Layer 2 scaling solutions (e.g., rollups, state channels) to improve transaction throughput and reduce gas costs. \u2713 \u2713 S10.2.A2 Verify the security and reliability of Layer 2 solutions before integration. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-1/","title":"SCSVS-GOV-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-1/#s31-economic-models","title":"S3.1 Economic Models","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-1/#control-objective","title":"Control Objective","text":"<p>Ensure that economic models, including incentive structures and tokenomics, are designed and implemented in a way that secures value and incentivizes proper behavior within the ecosystem. Contracts should handle fluctuating token values and avoid creating opportunities for exploitation.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-1/#s31a-incentive-structures","title":"S3.1.A Incentive Structures","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S3.1.A1 Ensure that the withdrawal process implements a pull-based approach rather than a push-based one to track accounting and allow users to pull payments. \u2713 \u2713 \u2713 S3.1.A2 The rate of cbETH to ETH can decrease, impacting users who hold or interact with cbETH. Ensure mechanisms are in place to handle fluctuations in conversion rates. \u2713 \u2713 S3.1.A3 Validators on the Ethereum 2.0 Beacon Chain can be penalized or slashed for misbehavior, which can affect the value of rETH. Ensure that these dynamics are considered in value assessments and interactions. \u2713 \u2713 S3.1.A4 The conversion rate between ETH and rETH might change over time based on the rewards accrued from staking. Ensure that these fluctuations are properly managed and captured. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-2/","title":"SCSVS-GOV-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-2/#s32-tokenomics","title":"S3.2 Tokenomics","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-2/#control-objective","title":"Control Objective","text":"<p>Ensure that tokens used within the smart contract ecosystem are securely implemented, including aspects such as value management, rebasing mechanisms, and reward systems. Contracts should prevent token vulnerabilities like double-spending, incorrect rewards, and improper fee handling.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-2/#s32a-economic-security-of-tokens-and-their-use-cases","title":"S3.2.A Economic Security of Tokens and Their Use Cases","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S3.2.A1 Ensure that Merkle trees do not contain duplicate proofs, as this can lead to vulnerabilities like double-spending. \u2713 \u2713 S3.2.A2 Verify that DeFi protocols account for tokens with negative rebase mechanisms, ensuring that value changes and potential miscalculations are properly handled and mitigated. \u2713 \u2713 S3.2.A3 Verify that reward claims are correctly implemented to ensure users receive their correct rewards. \u2713 \u2713 S3.2.A4 Verify that tokens do not have vulnerabilities such as incorrect fee application or unexpected behavior due to token transfer issues. \u2713 \u2713 S3.2.A5 Verify that all claimable addresses are included in the hashing process for Merkle tree leaves to prevent attackers from claiming funds they should not. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-3/","title":"SCSVS-GOV-3","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-3/#s33-preventing-reentrancy-and-logic-flaws","title":"S3.3 Preventing Reentrancy and Logic Flaws","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-3/#control-objective","title":"Control Objective","text":"<p>Ensure the smart contract's transaction flow and logic integrity are protected from reentrancy attacks and logic flaws. Contracts should implement robust control structures and security patterns to prevent reentrancy, handle complex flows, and ensure that state transitions are secure and symmetrical.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-3/#s33a-transaction-flow-security","title":"S3.3.A Transaction Flow Security","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S3.3.A1 Check for edge cases in loop control structures to prevent unexpected behaviors due to break or continue statements. \u2713 \u2713 S3.3.A2 Ensure that scenarios where sender and recipient are the same are considered to prevent unintended issues in smart contracts. \u2713 \u2713 S3.3.A3 Ensure that the <code>NonReentrant</code> modifier is applied before other modifiers in functions to prevent reentrancy attacks. \u2713 \u2713 S3.3.A4 Verify that the check-effect-interaction pattern is implemented to prevent reentrancy attacks. \u2713 \u2713 S3.3.A5 Ensure that function calls with arbitrary user input and low-level calls are handled securely to avoid introducing risks. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-GOV-3/#s33b-function-integrity","title":"S3.3.B Function Integrity","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SWE S3.3.B1 Ensure that functions intended to be unique per parameter set are not callable multiple times to prevent potential issues. \u2713 \u2713 S3.3.B2 Verify that state changes in functions, such as withdraw and deposit, are symmetrically handled to avoid undesired behavior due to inconsistencies. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-1/","title":"SCSVS-ORACLE-1","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-1/#s71-preventing-overflowunderflow","title":"S7.1 Preventing Overflow/Underflow","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-1/#control-objective","title":"Control Objective","text":"<p>Implement safe arithmetic practices to prevent overflow and underflow vulnerabilities that can compromise contract functionality and security.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-1/#s71a-use-of-safe-math-libraries","title":"S7.1.A Use of Safe Math Libraries","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S7.1.A1 Verify that explicit type casting does not lead to overflow or underflow issues. \u2713 \u2713 S7.1.A2 Verify that integer arithmetic operations do not exceed their bounds to prevent integer overflow or underflow vulnerabilities. \u2713 \u2713 S7.1.A3 Ensure that operations involving time units and other expressions handle potential overflows correctly. \u2713 \u2713 S7.1.A4 Verify that division by zero is correctly handled and causes a transaction revert to prevent unexpected behavior. \u2713 \u2713 S7.1.A5 Ensure that variables are managed within their bounds to prevent reverts due to exceeding limits. \u2713 \u2713 S7.1.A6 Ensure that arithmetic operations within the unchecked{} block are carefully managed to prevent unintentional overflow or underflow. \u2713 \u2713 S7.1.A7 Confirm that inline assembly operations handle division by zero and overflow/underflow according to desired behavior and revert appropriately. \u2713 \u2713 S7.1.A8 Implement checks to handle cases where operations might introduce unintended precision issues or rounding errors. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-1/#s71b-fixed-point-arithmetic","title":"S7.1.B Fixed-Point Arithmetic","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S7.1.B1 Verify that fixed-point arithmetic operations are performed safely to prevent overflow, underflow, and precision loss. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-2/","title":"SCSVS-ORACLE-2","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-2/#s72-arithmetic-integrity","title":"S7.2 Arithmetic Integrity","text":"","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-2/#control-objective","title":"Control Objective","text":"<p>Ensure that all calculations and logical operations within the smart contract are performed correctly to maintain data integrity and prevent manipulation.</p>","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-2/#s72a-secure-calculations-and-logic","title":"S7.2.A Secure Calculations and Logic","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S7.2.A1 Ensure that price or rate calculations derived from asset balances are protected from manipulation, considering attack vectors like flash loans and donations. \u2713 \u2713 S7.2.A2 Ensure that the use of structs and arrays does not lead to data corruption or incorrect values due to storage encoding issues. \u2713 \u2713 S7.2.A3 Avoid operations that could lead to unintended data type conversions or precision loss by ensuring arithmetic operations are performed correctly. \u2713 \u2713 S7.2.A4 Enforce a minimum transaction amount to prevent attackers from clogging the network with zero amount or dust transactions. \u2713 \u2713 S7.2.A5 Validate that financial operations respect associative properties, ensuring consistent outcomes whether operations are performed in aggregate or iteratively. \u2713 \u2713 S7.2.A6 Implement proper rounding direction for calculations where accounting relies on user shares to avoid inaccuracies. \u2713 \u2713 S7.2.A7 Validate that inequalities and comparisons are correctly implemented to handle edge values appropriately. \u2713 \u2713 S7.2.A8 Ensure that abi.decode adheres to the type limits to avoid reverts due to overflow of target types. \u2713 \u2713 S7.2.A9 Ensure that logical operators such as <code>==</code>, <code>!=</code>, <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code> are used correctly, especially when test coverage may be limited. \u2713 \u2713","tags":[]},{"location":"SCSVS/controls/SCSVS-ORACLE-2/#s72b-precondition-and-postcondition-checks","title":"S7.2.B Precondition and Postcondition Checks","text":"SCSVS\u00a0VR\u00a0ID Requirement L1 L2 L3 SCWE S7.2.B1 Ensure that multiplication is performed before division to maintain precision in calculations. \u2713 \u2713 S7.2.B2 Ensure that the request confirmation number is high enough to mitigate risks associated with chain re-orgs. \u2713 \u2713 S7.2.B3 Verify that off-by-one errors are avoided in loops and iterations, ensuring correct handling of list lengths and indexing. \u2713 \u2713 S7.2.B4 Verify that unsigned integers are not used to represent negative values, as this can lead to erroneous behavior. \u2713 \u2713 S7.2.B5 Verify that calculations with multiple terms handle all possible edge cases for min/max values to avoid errors. \u2713 \u2713","tags":[]},{"location":"SCWE/","title":"Smart Contract Security Weakness Enumeration (SCWE)","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> About the SCWE <p>The Smart Contract Security Weakness Enumeration (SCWE) is a list of common security and privacy weaknesses in mobile applications. It is intended to be used as a reference for developers, security researchers, and security professionals. It acts as the bridge between the SCSVS and the SCSTG.</p> <p> </p> <p>For its definition we draw inspiration from the Common Weakness Enumeration (CWE), which is a community-developed list of common software security weaknesses. The SCWE is intended to be a complementary list to the CWE, focusing specifically on security weaknesses in mobile applications.</p> <p>A weakness is a security or privacy issue that can be introduced into a mobile application. Weaknesses are categorized by the MASVS categories and controls. For example, a weakness related to the use of insecure random number generators is categorized under the <code>MASVS-CODE-1</code> control.</p> <p>Each weakness contains the following information:</p> <ul> <li>Overview: A brief description of the weakness.</li> <li>Impact: The potential impact of the weakness on the security or privacy of the application.</li> <li>Modes of Introduction: The ways in which the weakness can be introduced into an application.</li> <li>Mitigations: Recommendations for mitigating the weakness.</li> </ul> <p>\"Weakness vs Vulnerability\": It is important to note that a weakness is not a vulnerability, but it can lead to the introduction of vulnerabilities. According to the CWE, a weakness is a condition in a software, firmware, hardware, or service component that, under certain circumstances, could contribute to the introduction of vulnerabilities. Whereas a vulnerability is a flaw in a software, firmware, hardware, or service component resulting from a weakness that can be exploited, causing a negative impact to the confidentiality, integrity, or availability of an impacted component or components.</p> SCWE ID Title SCSVS CG ID SCSVS SCG IDs L1 L2 R P Status SCWE-002  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-007  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-001  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-008  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-009  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-011  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-006  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-003  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-010  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-005  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new SCWE-004  Insertion of Sensitive Data into Logs SCSVS-AUTH SCSVS-AUTH-2 profile:L1 profile:L2 profile:R newstatus:new <p></p>","tags":[]},{"location":"SCWE/SCSVS-ARCH/SCWE-003/","title":"SCWE-003: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ARCH/SCWE-003/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ARCH/SCWE-003/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ARCH/SCWE-003/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ARCH/SCWE-003/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-AUTH/SCWE-001/","title":"SCWE-001: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-AUTH/SCWE-001/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-AUTH/SCWE-001/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-AUTH/SCWE-001/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-AUTH/SCWE-001/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BLOCK/SCWE-005/","title":"SCWE-005: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BLOCK/SCWE-005/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BLOCK/SCWE-005/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BLOCK/SCWE-005/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BLOCK/SCWE-005/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BRIDGE/SCWE-002/","title":"SCWE-002: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BRIDGE/SCWE-002/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BRIDGE/SCWE-002/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BRIDGE/SCWE-002/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-BRIDGE/SCWE-002/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CODE/SCWE-004/","title":"SCWE-004: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CODE/SCWE-004/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CODE/SCWE-004/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CODE/SCWE-004/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CODE/SCWE-004/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMM/SCWE-007/","title":"SCWE-007: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMM/SCWE-007/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMM/SCWE-007/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMM/SCWE-007/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMM/SCWE-007/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMP/SCWE-006/","title":"SCWE-006: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMP/SCWE-006/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMP/SCWE-006/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMP/SCWE-006/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-COMP/SCWE-006/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CRYPTO/SCWE-008/","title":"SCWE-008: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CRYPTO/SCWE-008/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CRYPTO/SCWE-008/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CRYPTO/SCWE-008/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-CRYPTO/SCWE-008/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-DEFI/SCWE-009/","title":"SCWE-009: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-DEFI/SCWE-009/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-DEFI/SCWE-009/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-DEFI/SCWE-009/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-DEFI/SCWE-009/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-GOV/SCWE-010/","title":"SCWE-010: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-GOV/SCWE-010/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-GOV/SCWE-010/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-GOV/SCWE-010/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-GOV/SCWE-010/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ORACLE/SCWE-011/","title":"SCWE-011: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ORACLE/SCWE-011/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ORACLE/SCWE-011/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ORACLE/SCWE-011/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"SCWE/SCSVS-ORACLE/SCWE-011/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["scwe","L1","L2","R","SCSVS-AUTH","SCSVS-AUTH-2","SCSVS-CODE-1"]},{"location":"checklists/SCSVS-ARCH/","title":"SCSVS-ARCH","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p> SCG ID VR ID TEST ID Control / SCSTG Test Checklist SCSVS-ARCH-1 S1.1.A1 SCSTG-TEST-0005 Verify that the contract is divided into modular components or contracts. - Check if the contract is divided into separate modules or contracts. - Check if the contract is destroyed with separation of concerns in mind. SCSVS-ARCH-1 S1.1.A2 SCSTG-TEST-0006 Ensure that upgrade mechanisms are designed to allow secure and controlled updates. - Check if the contract is divided into separate modules or contracts. - Check if the contract is deployed with separation of concerns in mind. SCSVS-ARCH-2 S1.1.B1 No Test ID Verify that the contract is divided into modular components or contracts. - Check if the contract is divided into separate modules or contracts. - Check if the contract is destruct with separation of concerns in mind. SCSVS-ARCH-2 S1.1.B2 No Test ID Ensure that upgrade mechanisms are designed to allow secure and controlled updates. - Check if the contract is divided into separate modules or contracts. - Check if the contract is demolish with separation of concerns in mind. <p></p> <p></p>","tags":[]},{"location":"checklists/SCSVS-AUTH/","title":"SCSVS-AUTH","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-BLOCK/","title":"SCSVS-BLOCK","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-BRIDGE/","title":"SCSVS-BRIDGE","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-CODE/","title":"SCSVS-CODE","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-COMM/","title":"SCSVS-COMM","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-COMP/","title":"SCSVS-COMP","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-CRYPTO/","title":"SCSVS-CRYPTO","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-DEFI/","title":"SCSVS-DEFI","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-GOV/","title":"SCSVS-GOV","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"checklists/SCSVS-ORACLE/","title":"SCSVS-ORACLE","text":"<p>Temporary Checklist</p> <p>This checklist contains the SCSVS v0.0.1 verification levels (L1, L2 and L3) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the SCSVS v1 ID that the test was previously covering and might differ in the upcoming version of the SCSTG and SCS Checklist.</p> <p>For the upcoming of the SCSTG version we will progressively split the SCSTG tests into smaller tests, the so-called \"atomic tests\" and assign the new SCS profiles to their respective SCWE weaknesses.</p>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/","title":"How Can You Contribute?","text":"<p>You can directly contribute to the SCSVS or SCSTG in many different ways! First, go ahead and create a GitHub account for free on the GitHub homepage.</p>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/#contribution-flow","title":"Contribution Flow","text":"<pre><code>flowchart LR\n    A(Open Discussion) --&gt;|discuss| C{qualifies?}\n    C --&gt;|Yes| D(Issue)\n    C --&gt;|No| E[Close]\n    D --&gt;|open PR| F(Pull Request)\n    F --&gt;|review| G{approved?}\n    F --&gt;|make changes| F\n    G --&gt;|Yes| H[Merge]\n    G --&gt;|No| I[Close]</code></pre>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/#participate-in-discussions","title":"\ud83d\udcac Participate in Discussions","text":"<p>Our GitHub Discussions are the first place to go to ask questions, give feedback, and propose new ideas. If your proposal qualifies for the SCSTG/SCSVS, we'll convert it into an \"Issue\" (the discussion might take a while).</p>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/#create-issues","title":"\ud83c\udfaf Create Issues","text":"<p>Before creating a PR, first create an Issue to be discussed for missing requirements, content or errors.</p> <ul> <li>To avoid multiple people duplicating effort on the same issue, project leaders will assign it to only a few that will own it.</li> <li>Explain what you think is missing in the issue, including references (if available) and suggest where it could be added.</li> </ul>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/#open-a-pull-request","title":"\ud83d\udcdd Open a Pull Request","text":"<p>You can contribute with content or corrections by opening a Pull Request (PR).</p> <ul> <li>Your PR may be merged after review.</li> <li>Be sure to follow our style guide when writing content.</li> </ul> <p>Learn how to open a PR here.</p>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/#become-a-reviewer","title":"\u2705 Become a Reviewer","text":"<p>You can Review Pull Requests (PRs) and also gain contributions. If you are a fluent speaker in any of the different languages that the SCSVS is available in, feel free to give feedback on any of the submitted PRs.</p> <p>After your PR or issue has been submitted, we will review it as quickly as possible which typically only takes a few days. If you think we have forgotten about it, feel free to give us a nudge after 7 days have passed.</p> <p>Learn how to review a PR here.</p>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/#proof-reading","title":"\ud83d\udd0e Proof-reading","text":"<p>If you do proof-reading, these are the things we\u2019re looking for:</p> <ul> <li>Content cohesion &amp; coherence<ul> <li>is there a good linkage of ideas?</li> <li>does the paragraph make sense?</li> <li>does it make sense with the next one? Think that hundreds of people have written in here, often without considering the surroundings of the text they were including.</li> </ul> </li> <li>Reducing the content to a minimum (people tend to be very verbose/wordy) and in such a document we need clear and short/concise statements</li> <li>Optimize for scannability (maybe instead of a big paragraph it would be better to have a bullet point list).</li> <li>Any passive voice sentences? Convert to active voice.</li> <li>Does each paragraph focus on a single topic?</li> <li>Are key points stated at the start of each section?</li> <li>Are commas, parentheses, colons, em-dashes, and semicolons used properly?</li> </ul> <p>Refer to Google Technical Writing trainings for more info:</p> <ul> <li>Google Technical Writing One</li> <li>Google Technical Writing Two</li> </ul>","tags":[]},{"location":"contributing/2_Getting_Started/","title":"Getting Started","text":"<p>First of all Create a GitHub account (a free one is enough) by following these steps.</p> <p>Our workflow is like this:</p> <ol> <li>Open a Discussion (for ideas and proposals) If your proposal qualifies for the SCSTG/SCSVS we'll convert it into an \"Issue\" (the discussion might take a while).</li> <li>SCSVS Example: \"Add a SCSVS-CODE requirement on Key rotation\"</li> <li> <p>SCSTG Example: \"Add a Test case for key rotation\"</p> </li> <li> <p>Open an Issue (for concrete actionable things that have to / could be done) For instance, there's a typo, or it's clear that a certain Test case doesn't have e.g. \"Dynamic Analysis\" and it should be added.</p> </li> <li>Open a PR (to add actual content) This could be the fix for the mentioned typo, a whole new section or some other content. Usually a PR has a \"closes\" sentence in its description. For example \"Closes #543\" so that we (and GitHub) know which Issue(s) is being addressed on that PR.</li> </ol> <p>Normally, contributors should follow the whole flow. But sometimes it's clear what's needed so we directly go to 2 (open an issue) or even to 3 (open a PR). We recommend starting with a discussion or directly contacting us to save you the hurdle of writing and submitting new content that does not qualify so we have to reject it after the work is done.</p> <p>If you just have an specific question you can post it to (you need a GitHub Account):</p> <ul> <li>https://github.com/OWASP/owasp-scsvs/discussions/categories/q-a</li> <li>https://github.com/OWASP/owasp-scstg/discussions/categories/q-a</li> </ul> <p>\"GitHub Discussions\" are re-posted to our Slack channel.</p> <p>Once you get your answer please mark it as answered. When you mark a question as an answer, GitHub will highlight the comment and replies to the comment to help visitors quickly find the answer.</p>","tags":[]},{"location":"contributing/2_Getting_Started/#contribute-online","title":"Contribute Online","text":"<p>GitHub makes this extremely easy.</p> <p>For small changes in one file:</p> <ol> <li>Go to the file you'd like to modify and click on \"Edit\".</li> <li>Do your changes and commit them. GitHub will guide you and suggest to open a Pull Request.</li> </ol> <p>For more complex changes or across files:</p> <ol> <li>Press <code>.</code> while browsing the repo or pull request.</li> <li>You'll be welcomed with a \"github.dev Web-based Editor\" where you can work using an online Visual Studio.</li> <li>Do your changes, commit and push them as you'd do locally.</li> </ol> <p></p> <p>Learn more about the github.dev Web-based Editor in \"GitHub Docs\".</p>","tags":[]},{"location":"contributing/2_Getting_Started/#contribute-offline","title":"Contribute Offline","text":"<p>For this you need an IDE or text editor and git on your machine. We recommend using the free Visual Studio Code editor with the markdownlint extension.</p> <ol> <li>Fork the repo. Forking the repo allows you to make your changes without affecting the original project until you're ready to merge them.</li> <li> <p>Clone your fork repo and add the remote upstream repo, e.g. for owasp-scsvs:</p> <pre><code>$ git clone https://github.com/&lt;your_github_user&gt;/owasp-scsvs.git\n$ cd owasp-scsvs/\n$ git remote add upstream git@github.com:OWASP/owasp-scsvs.git\n</code></pre> </li> <li> <p>Create a branch.</p> <pre><code>$ git checkout -b fix-issue-1456\n</code></pre> </li> <li> <p>Make your changes.</p> </li> <li>Commit and push your changes. This can be done by executing the command <code>git add MYFILE</code> for every file you have modified, followed by <code>git commit -m 'Your Commit Message'</code> to commit the modifications and <code>git push</code> to push your modifications to GitHub.</li> <li>Open a PR.</li> </ol>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/","title":"Pull Requests &amp; Reviews","text":"","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-open-a-pr","title":"How to Open a PR","text":"<p>You can create a Pull Request (PR) by following these steps. Remember that:</p> <ul> <li>The target branch should be <code>master</code>.</li> <li>If your PR closes and issue, write \"Closes <code>#&lt;issue-id&gt;</code>\".</li> </ul> <p>Your PR will be reviewed soon (refer to this page to learn more about reviews).</p> <p>Before opening a PR please self-review your changes in GitHub and ensure that you follow our style guide to speed up the review process\u26a1</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-incorporate-the-reviewers-feedback-to-your-pr","title":"How to Incorporate the Reviewer's Feedback to your PR","text":"<p>It might be directly approved and merged or one of our reviewers will send you some comments and suggested changes.</p> <p>When reviewers suggest changes in a pull request, you can automatically incorporate the changes into your PR.</p> <ul> <li>Apply any Suggested Changes using the \"Commit suggestions\" button.</li> <li>In order to process a comment, simply make modifications directly to your branch and push normally. GitHub will automatically detect these changes and add them to your existing PR.</li> <li>As you update your PR and apply changes, mark each conversation as resolved.</li> <li>If you run into any merge issues, refer to this page to learn how to resolve them.</li> </ul> <p>NOTE: Remember to regularly sync your fork with the upstream repo: <code>git pull upstream/master</code></p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-review-a-pr","title":"How to Review a PR","text":"<p>If you'd like to review an open PR please follow these steps:</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#step-1-comment-and-suggest-changes","title":"Step 1: Comment and Suggest Changes","text":"<p>You can enter single or multi-line comments (click and drag to select the range of lines):</p> <p></p> <p>Always prefer making \"Suggested Changes\" using the <code>\u00b1</code> button:</p> <p></p> <p>If the suggestion you'd like to make cannot be expressed using \"suggested changes\" please enter a clear comment explaining what should be fixed (e.g. some paragraphs don't link properly or some essential information cannot be found and should be added).</p> <p>Using \"Suggested Changes\" saves you as a reviewer and the PR author a lot of time. And you get points (attributions) for the changes that you suggested (if the author commits them you become a co-author of those commits). If you're constant with your reviewer work you can apply to be recognize as an official reviewer in our Acknowledgements page.</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#step-2-submit-your-review","title":"Step 2: Submit your Review","text":"<p>Once you went through the whole PR you can submit your review</p> <ol> <li>Click on \"Review changes\".</li> <li>Enter a comment for the contributor.</li> <li>Select the type of review you'd like to leave (Comment, Approve or Request Changes).</li> <li>Click on \"Submit review\".</li> </ol> <p>Learn more: \"(GitHub Docs) Reviewing proposed changes in a pull request\".</p>","tags":[]},{"location":"contributing/4_Add_new_Language/","title":"Add a New Language","text":"","tags":[]},{"location":"contributing/4_Add_new_Language/#scstg-translations","title":"SCSTG Translations","text":"<p>The SCSTG is a living document that changes and adapts to the most recent security recommendations every day. While we do want to reach the maximum audience possible, our past experience shows that maintaining translations has proven to be an extremely challenging task. Therefore, please understand that any PRs containing SCSTG translations will be declined, but you're free to do them on your own forks.</p>","tags":[]},{"location":"contributing/4_Add_new_Language/#scsvs-translations","title":"SCSVS Translations","text":"","tags":[]},{"location":"contributing/5_Style_Guide/","title":"Style Guide","text":"<p>The following rules are meant to ensure consistency of the SCSTG:</p> <ol> <li>Keep the content factual, brief and focused. Avoid duplicating other sections of the guide;</li> <li>Refrain from advertising commercial tools or services;</li> <li>When giving technical instructions, address the reader in the second person.</li> </ol> <p>Technical Writing</p> <p>We recommend you to take these free Google courses when writing or reviewing content for the SCS project:</p> <ul> <li>Technical Writing One</li> <li>Technical Writing Two</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#1-how-to-write-content","title":"1. How to Write Content","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#amount-of-content","title":"Amount of Content","text":"<p>The primary measure for amount of content on a page should be based on the purpose it serves.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#use-short-pages","title":"Use short pages","text":"<p>Those containing one or two screens of text at most. Users are scanning for link choices. Use longer pages (those that require more scrolling or reading) deeper within the chapter where content can be printed and read later.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#for-very-large-sections-of-information","title":"For very large sections of information","text":"<p>Consider creating a supporting document and linking to it from the page rather than displaying all the information directly on the page.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#gender-neutrality","title":"Gender Neutrality","text":"<p>The SCSTG reaches all kind of people all over the world. To ensure inclusiveness and diversity, please refrain from using the following throughout the book:</p> <ul> <li>she / her / hers / herself</li> <li>he / him / his / himself</li> </ul> <p>Or any other constructions like \"he/she\", \"s/he\", \"his or her\". Instead, use the following gender-neutral alternatives:</p> <ul> <li>Omit the pronoun if possible: \"The user authenticates himself using ...\" -&gt; \"The user authenticates using ...\"</li> <li>Replace pronouns with \"the or \"a\": \"When the user enters his password ...\" -&gt; \"When the user enters the password ...\"</li> <li>Use plural nouns and pronouns: \"An attacker will use his jailbroken device ...\" -&gt; \"Attackers will use their jailbroken devices ...\"</li> <li>Use the second person: \"If the attacker runs this code, he can bypass ...\" -&gt; \"If you run this code, you can bypass ...\"</li> <li>Use the imperative: \"A developer should never use ... in his code\" -&gt; \"Never use ... in your code!\"</li> </ul> <p>There is one exception: We are still using \"man in the middle\", as it is simply a common term in the industry and there is no common replacement for it.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#timeliness-of-content","title":"Timeliness of Content","text":"<p>Keeping accurate and timely content establishes the OWASP SCS deliverables as a credible and trustworthy source of information.</p> <p>When using statistical data on your page, ensure that the information is current and up-to-date and is accompanied by the source from which it was derived, along with the date the data was compiled.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#content-for-the-digital-platform-versus-for-print","title":"Content for the Digital Platform Versus for Print","text":"<p>Write concise content that the user can read quickly and efficiently. For digital content - create shorter pages that are cross-linked. If your content is likely to be printed, create one long page.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#audience","title":"Audience","text":"<p>Write for an international audience with a basic level of technical understanding i.e. they have a mobile phone and know how to install an app. Avoid hard-to-translate slang words/phrases to ensure content is accessible to readers who aren't native English speakers.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#context-and-orientation","title":"Context and Orientation","text":"<p>Let the users know where they are on every page. Establish the topic by using a unique page heading.</p> <p>Include a clear and concise introduction where possible.</p> <p>Link to background information where necessary.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#write-so-people-will-read-with-joy","title":"Write so People Will Read with Joy","text":"<p>Use the following methods to increase scannability:</p> <ul> <li>Use left alignment for headings, subheadings, and text</li> <li>Link where appropriate</li> <li>Use lists rather than paragraphs wherever possible</li> <li>Use dashes <code>-</code> rather than asterisks <code>*</code> for lists</li> <li>Include only one main idea in each paragraph</li> <li>Put the most important information at the top</li> <li>Start the page with the conclusion as well as a short summary of the remaining content</li> <li>Use headings where applicable</li> <li>Use short, simple words that are to the point</li> <li>Be concise and focused</li> </ul> <p>For longer pages, use the following tools to make the page easily scannable:</p> <ul> <li>Anchor links</li> <li>Subheadings and relevant links</li> <li>Bulleted copy</li> <li>Meaningful graphics, or pull quotes, to break up larger blocks of text</li> <li>End links</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#effective-use-of-lists","title":"Effective Use of Lists","text":"<p>When presenting your content in a list format:</p> <ul> <li>Use numbered lists when the order of entries is important.</li> <li>Use bulleted lists whenever the order of the entries is not important.</li> <li>Generally, limit the number of items in a single list to no more than nine.</li> <li>Generally, limit lists to no more than two levels: primary and secondary.</li> <li>Punctuate and capitalize list items consistently (CMOS 6.124-6.126).</li> <li>Don't add end punctuation to list items that are not complete sentences unless they complete the sentence that introduces the list.</li> <li>Use appropriate capitalization and end punctuation for list items that individually form complete sentences.</li> <li>If the list items complete an introductory sentence, end each (except the last item) with a comma and do not add \"and\" after the second-to-last item. End the last item with appropriate end punctuation (usu. a period).</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#numbering-conventions","title":"Numbering Conventions","text":"<p>When using a number between zero and ten, spell out the number (e.g., \"three\" or \"ten\").</p> <p>When using any number higher than ten, use the numeric version (e.g., \"12\" or \"300\").</p>","tags":[]},{"location":"contributing/5_Style_Guide/#2-language","title":"2. Language","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#american-spelling-and-terminology","title":"American Spelling and Terminology","text":"<p>Use American spelling and terminology.</p> <p>Change all British spelling and terminology to the American equivalents where applicable. This includes \"toward\" (US) vs. \"towards\" (UK), \"among\" (US) vs. \"amongst\" (UK), \"analyze\" (US) vs. \"analyse\" (UK), \"behavior\" (US) vs \"behaviour\" (UK), etc.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#plurals","title":"Plurals","text":"<p>Adhere to standard grammar and punctuation rules when it comes to pluralization of typical words.</p> <p>The plural of calendar years does not take the apostrophe before the \"s\". For example, the plural form of 1990 is 1990s.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#title-capitalization","title":"Title Capitalization","text":"<p>We follow the title case rules from the \"Chicago Manual of Style\":  </p> <ul> <li>Capitalize the first and last word in a title, regardless of part of speech</li> <li>Capitalize all nouns (app, encryption, package), pronouns (you, she, it), verbs (analyze, compile, inspect), adjectives (active, insecure, weak), adverbs (immediately, quietly), and subordinating conjunctions (as, because, although)</li> <li>Lowercase \"to\" as part of an infinitive</li> <li>Lowercase all articles (a, the), prepositions (to, at, in, with), and coordinating conjunctions (and, but, or)</li> </ul> <p>When in doubt, you can verify proper capitalization on https://titlecaseconverter.com/.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#standardization","title":"Standardization","text":"<p>This is a list of words/abbreviations that are used inconsistently at the moment in the SCSTG and need standardization:</p> <ul> <li>man-in-the-middle attack (MITM)</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#contractions","title":"Contractions","text":"<p>Use the following common contractions:</p> <ul> <li>are not -&gt; aren't  </li> <li>cannot -&gt; can't  </li> <li>could not -&gt; couldn't  </li> <li>did not -&gt; didn't  </li> <li>do not -&gt; don't  </li> <li>does not -&gt; doesn't  </li> <li>has not -&gt; hasn't  </li> <li>had not -&gt; hadn't  </li> <li>have not -&gt; haven't</li> <li>is not -&gt; isn't</li> <li>it is -&gt; it's</li> <li>that is -&gt; that's  </li> <li>there is -&gt; there's  </li> <li>was not -&gt; wasn't  </li> <li>were not -&gt; weren't  </li> <li>will not -&gt; won't  </li> <li>would not -&gt; wouldn't  </li> <li>you are -&gt; you're  </li> <li>you have + verb -&gt; you've + verb</li> <li>you will -&gt; you'll  </li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#abbreviations","title":"Abbreviations","text":"<p>Abbreviations include acronyms, initialisms, shortened words, and contractions.</p> <ul> <li>Spell out the term the first time it's used, followed by the abbreviation in parentheses. Example: OWASP Smart Contract Security Testing Guide (SCSTG). Subsequent usages in the same chapter may include the abbreviation only.</li> <li>If it only appears once in the content, spell out the term instead of using the abbreviation.</li> <li>In titles and headings, use the abbreviation but be sure to properly introduce it (see above) in the text that follows.</li> <li>Use \"a\" or \"an\" depending on the pronunciation of the acronym. Example: a DLL, an APK, a URL, a SQL.</li> <li>Add an \"s\" for the plural form unless the abbreviation already stands for a plural noun. Example: the APIs, CSS (not CSSs).</li> <li>If the abbreviation is better known as its full spelled-out term, use only the abbreviation. Example: PDF, URL, USB, ZIP.</li> </ul> <p>The following snippet demonstrates most of these points:</p> <pre><code>## JAR Files\n\nJAR (Java ARchive) files are [...]\n\nAPKs are packed using the ZIP format. An APK is a variation of a JAR file [...]\n</code></pre> <p>For commonly used file formats such as APK, IPA or ZIP, please do not refer to them as \".apk\", \".ipa\" or \".zip\" unless you're explicitly referring to the file extension.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#referencing-android-versions","title":"Referencing Android versions","text":"<p>Use the following format when referring to an Android version: Android X (API level YY). Usage of the descriptive name (Ex: Oreo) is discouraged.</p> <p>Ex: Android 9 (API level 28)</p>","tags":[]},{"location":"contributing/5_Style_Guide/#addressing-the-reader-in-test-cases","title":"Addressing the Reader in Test Cases","text":"<p>Throughout the guide, you may want to address the readers in order to tell them what to do, or what they should notice. For any such case, use an active approach and simply address the reader using \"you\".</p> <p>Correct: If you open the AndroidManifest.xml file, you will see a main Application tag, with the following attributes: atr1, atr2 and atr3. If you run the following command, you will see that atr1 is actually dangerous: [...].</p> <p>Wrong: The AndroidManifest.xml file contains an Application tag, with the following attributes: atr1, atr2 and atr3. The command below shows that atr1 is dangerous: [...].</p> <p>Wrong: If we open the AndroidManifest.xml file, we will see a main Application tag, with the following attributes: atr1, atr2 and atr3. If we run the following command, we will see that atr1 is actually dangerous: [...].</p>","tags":[]},{"location":"contributing/5_Style_Guide/#3-external-references","title":"3. External References","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#web-links","title":"Web Links","text":"<p>Use markdown's in-line link format (A) <code>[TEXT](URL \"TITLE\")</code> or (B) <code>[TEXT](URL)</code>.</p> <p>For example:</p> <pre><code>The [threat modeling guidelines defined by OWASP](https://owasp.org/www-community/Threat_Modeling \"OWASP Threat Modeling\") are generally applicable to mobile apps.\n</code></pre> <p>When using (A), be sure to escape special characters such as apostrophe (\\') or single quote (`), as otherwise the link will be broken in Gitbook.</p> <p>Wrong usage, see \"iPhone's\":</p> <pre><code>[UDID of your iOS device via iTunes](https://medium.com/@igor_marques/how-to-find-an-iphones-udid-2d157f1cf2b9 \"How to Find Your iPhone's UDID\")\n</code></pre> <p>Right usage, see \"iPhone\\'s\":</p> <pre><code>[UDID of your iOS device via iTunes](https://medium.com/@igor_marques/how-to-find-an-iphones-udid-2d157f1cf2b9 \"How to Find Your iPhone\\'s UDID\")\n</code></pre> <p>When adding links to the \"References\" section at the end of the chapters use <code>- Title - &lt;url&gt;</code>. This is needed to force latex to print URLs properly for the PDF.</p> <p>For example:</p> <pre><code>- adb - &lt;https://developer.android.com/studio/command-line/adb&gt;\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#books-and-papers","title":"Books and Papers","text":"<p>For books and papers, use the following format: <code>[#NAME]</code>.</p> <p>And include the full reference in the \"References\" section at the end of the markdown file manually. Example:</p> <pre><code>An obfuscated encryption algorithm can generate its key (or part of the key)\nusing data collected from the environment [#riordan].\n</code></pre> <p>And under the \"References\" section at the end of the chapters:</p> <pre><code>- [#riordan] -  James Riordan, Bruce Schneier. Environmental Key Generation towards Clueless Agents. Mobile Agents and Security, Springer Verlag, 1998\n</code></pre> <p>Papers:</p> <p>The general form for citing technical reports is to place the name and location of the company or institution after the author and title and to give the report number and date at the end of the reference.</p> <p>Basic Format:</p> <pre><code>- [shortname] J. K. Author, \"Title of report,\" Abbrev. Name of Co., City of Co., Abbrev. State, Rep. xxx, year\n\n- [shortname] \\[Author(s)\\], \\[Title\\] - Link\n</code></pre> <p>Books:</p> <pre><code>- [shortname] \\[Author(s)\\], \\[Title\\], \\[Published\\], \\[Year\\]\n\n- [examplebook] J. K. Author, \"Title of chapter in the book,\" in Title of His Published Book, xth ed. City of Publisher, Country if not USA: Abbrev. of Publisher, year, ch. x, sec. x, pp. xxx-xxx.\n</code></pre> <p>NOTE: Use et al. when three or more names are given</p> <p>e.g.</p> <pre><code>- [klaus] B. Klaus and P. Horn, Robot Vision. Cambridge, MA: MIT Press, 1986.\n- [stein] L. Stein, \"Random patterns,\" in Computers and You, J. S. Brake, Ed. New York: Wiley, 1994, pp. 55-70.\n- [myer] R. L. Myer, \"Parametric oscillators and nonlinear materials,\" in Nonlinear Optics, vol. 4, P. G. Harper and B. S. Wherret, Eds. San Francisco, CA: Academic, 1977, pp. 47-160.\n- [abramowitz] M. Abramowitz and I. A. Stegun, Eds., Handbook of Mathematical Functions (Applied Mathematics Series 55). Washington, DC: NBS, 1964, pp. 32-33.\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#4-references-within-the-guide","title":"4. References Within The Guide","text":"<p>For references to other chapters in the SCSTG, simply name the chapter, e.g.: <code>See also the chapter \"Basic Security Testing\"</code>, <code>See the section \"Apktool\" in the chapter \"Basic Security Testing\"</code> etc. The SCSTG should be convenient to read as a printed book, so use internal references sparingly. Alternatively you can create a link for the specific section:</p> <pre><code>See the section \"[App Bundles](0x05a-Platform-Overview.md#app-bundles)\" in the chapter ...\n</code></pre> <p>Note that in such a case the anchor (everything after the <code>#</code>) should be lowercase, and spaces should be replaced with hyphens.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#5-insert-pictures","title":"5. Insert Pictures","text":"<p>Pictures must always be an HTML <code>&lt;img</code> element instead of the usual markdown image format.</p> <ul> <li><code>src</code> being the first value.</li> <li>a <code>width</code> may be specified.</li> <li>they must be included in the corresponding directory, e.g. in <code>Document/Images/Chapters</code> for SCSTG chapters.</li> </ul> <p>For example:</p> <pre><code>&lt;img src=\"Images/Chapters/0x05b/r2_pd_10.png\" width=\"80%\" /&gt;\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#6-punctuation-conventions","title":"6. Punctuation Conventions","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#lowercase-or-capital-letter-after-a-colon","title":"Lowercase or Capital Letter after a Colon","text":"<p>Chicago Manual of Style (6.61: Lowercase or capital letter after a colon) says: lowercase the first word unless it is a proper noun or the start of at least two complete sentences or a direct question.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#serial-comma-use","title":"Serial Comma Use","text":"<p>Use a serial comma before \"and\" for the last item in a run-in list of three or more items. For example:</p> <p>We bought apples, oranges, and tomatoes from the store.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#quote-marks-and-apostrophes","title":"Quote Marks and Apostrophes","text":"<p>Use straight double quotes, straight single quotes, and straight apostrophes (not curly quotes/apostrophes).</p>","tags":[]},{"location":"contributing/5_Style_Guide/#technical-terms","title":"Technical Terms","text":"<p>Spell/punctuate specific technical terms as they are used by the company (e.g., use the company website).</p> <p>In order of preference, spell/punctuate generic technical terms according to</p> <ol> <li>Merriam Webster's Collegiate Dictionary, 11th edition.</li> <li>Microsoft Manual of Style, 4th edition</li> <li>foldoc.org (Free Online Dictionary of Computing)</li> </ol> Noun Form Adjectival Form App Store NA backend backend Base64 Base64- black box same Bundle ID NA bytecode NA client side client-side codebase same code signing same command line same disassembler NA end users NA file name same macOS NA OS X NA pentest same PhoneGap NA Python NA repackage NA runtime same server side server-side snapshot length NA use case same Wi-Fi same white box same","tags":[]},{"location":"contributing/5_Style_Guide/#7-comments","title":"7. Comments","text":"<p>Markdown blockquotes can be used for comments in the documents by using <code>&gt;</code></p> <pre><code>&gt; This is a blockquote\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#8-code-and-shell-commands","title":"8. Code and Shell Commands","text":"<p>Use code blocks when including sample code, shell commands, and paths. In Markdown, code blocks are denoted by triple backticks (<code>```</code>). GitHub also supports syntax highlighting for a variety of languages. For example, a Java code block should be annotated as follows:</p> <pre><code>```java\npublic static void main(String[] args) { System.out.println(\" Hello World!\"); } } ;\n```\n</code></pre> <p>This produces the following result:</p> <pre><code>public static void main(String[] args) { System.out.println(\" Hello World!\"); } }\n</code></pre> <p>When including shell commands, make sure to use the correct language for syntax highlighting (e.g. <code>shell</code> or <code>bash</code>) and remove any prompt (host name, username, ...) from the commands, e.g.:</p> <pre><code>```shell\necho 'Hello World'\nHello World\n```\n</code></pre> <p>When a command requires parameters that need to be modified by the reader, surround them with angle brackets:</p> <pre><code>adb pull &lt;remote_file&gt; &lt;target_destination&gt;\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#in-text-keywords","title":"In-text Keywords","text":"<p>When they do not occur in a code block, place the following code-related keywords in backticks (<code>``</code>), double straight quote marks (<code>\"\"</code>), or leave unpunctuated according to the table:</p> Backticks Quotation Marks No Punctuation function names section titles application name method names chapter titles folder names commands book titles memory addresses (e.g. 0x100044520) class names flags values (e.g., \"true\", lowercase) block names command options (e.g., \"help\" option) flag names single menu item (e.g., \"Home\" menu) file names system error msgs. package names file paths passwords port numbers binary names method/function arguments method/function argument or return values (e.g., <code>true</code>, <code>0</code>, <code>YES</code>) XML attributes (e.g., <code>get-task-allow</code> on iOS Plists, <code>\"@string/app_name\"</code> on Android Manifests) XML attribute values (e.g., <code>android:label</code> on Android Manifests) property names object names API calls interface names <p>If nouns in backticks are plural, place the \"s\" after the second backtick (e.g. <code>RuntimeException</code>s). Do not add parentheses, brackets, or other punctuation to any keywords that are in backticks (e.g., <code>main</code> not <code>main()</code>).</p>","tags":[]},{"location":"contributing/5_Style_Guide/#navigation","title":"Navigation","text":"<p>When referring to any UI element by name, put its name in boldface, using <code>**&lt;name&gt;**</code> (e.g., Home -&gt; Menu).</p>","tags":[]},{"location":"donate/how_to_donate/","title":"How to Donate","text":"<p>1. Make your Donation:</p> <p></p> <p>Click the button to make your donation directly in the official OWASP website:</p> <p> Fill in the form and be sure to select the option \"Publicly list me as a supporter of OWASP Smart Contract Security\"</p> <p>  Make your Donation </p> <p></p> <p>2. Register your Donation Package (optional):</p> <p></p> <p>If your donation is above USD 500 you may opt-in for a Donation Package by registering it. We will then, together with the OWASP Foundation, verify and process it.</p> <p>  Register your Donation </p> <p></p>","tags":[]},{"location":"donate/packages/","title":"Donation Packages","text":"<p>These types of public recognition shall be online no less than one year, or no less than the next major release, whichever is greater.</p> <p> The Donation Packages have a maximum duration, once expired the logos will be removed and the donator will still be listed as supporter on the project website, GitHub and in the printed and digital versions. This can be renewed anytime.</p> <p>  Good Samaritan (USD 500)  Honorable Benefactor (USD 2,000 / 8 Available)  God Mode Donator (USD 4,000 / 5 Available) <ul><li> Listed as a supporter.</li><li> Small company logo.</li><li> 1 year</li></ul> <ul><li> Listed as a supporter.</li><li> Medium company logo</li><li> 2 year</li></ul> <ul><li> Listed as a supporter.</li><li>Large company logo.</li><li> 3 years</li></ul> <p></p> <p>Please note that the OWASP Donation Policy has changed since 22-Sept-2020. All details can be found in OWASP Donations Policy page.</p> <p>Contact us if you have any questions regarding your donation.</p>","tags":[]},{"location":"news/","title":"Blog","text":"","tags":[]},{"location":"sctop10/SC01-Reentrancy/","title":"Reentrancy Attacks","text":"","tags":[]},{"location":"sctop10/SC01-Reentrancy/#vulnerability-reentrancy","title":"Vulnerability: Reentrancy","text":"","tags":[]},{"location":"sctop10/SC01-Reentrancy/#description","title":"Description:","text":"<p>A reentrancy attack exploits the vulnerability in smart contracts when a function makes an external call to another contract before updating its own state. This allows the external contract, possibly malicious, to reenter the original function and repeat certain actions, like withdrawals, using the same state. Through such attacks, an attacker can possibly drain all the funds from a contract.</p>","tags":[]},{"location":"sctop10/SC01-Reentrancy/#example-dao-hack","title":"Example (DAO Hack):","text":"<pre><code>function splitDAO(uint _proposalID, address _newCurator) noEther onlyTokenholders returns (bool _success) {\n    ...\n\n    uint fundsToBeMoved = (balances[msg.sender] * p.splitData[0].splitBalance) / p.splitData[0].totalSupply;\n    //Since the balance is never updated the attacker can pass this modifier several times \n    if (p.splitData[0].newDAO.createTokenProxy.value(fundsToBeMoved)(msg.sender) == false) throw;\n\n    ...\n\n    // Burn DAO Tokens\n    // Funds are transferred before the balance is updated\n\n    Transfer(msg.sender, 0, balances[msg.sender]);\n    withdrawRewardFor(msg.sender); // be nice, and get his rewards\n    // Only now after the funds are transferred is the balance updated\n    totalSupply -= balances[msg.sender];\n    paidOut[msg.sender] = 0;\n    return true;\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC01-Reentrancy/#impact","title":"Impact:","text":"<ul> <li>The most immediate and impactful consequence is the draining of funds. Attackers exploit vulnerabilities to withdraw more money than they are entitled to, potentially emptying the contract's balance completely.</li> <li>An attacker can trigger unauthorized function calls. This can lead to unintended actions being executed within the contract or related systems.</li> </ul>","tags":[]},{"location":"sctop10/SC01-Reentrancy/#remediation","title":"Remediation:","text":"<ul> <li>Always ensure that every state change happens before calling external contracts, i.e., update balances or code internally before calling external code.</li> <li>Use function modifiers that prevent reentrancy, like Open Zepplin\u2019s Re-entrancy Guard.</li> </ul>","tags":[]},{"location":"sctop10/SC01-Reentrancy/#examples-of-smart-contracts-that-fell-victim-to-reentrancy-attacks","title":"Examples of Smart Contracts that fell victim to Reentrancy Attacks:","text":"<ol> <li>Rari Capital : A Comprehensive Hack Analysis</li> <li>Orion Protocol : A Comprehensive Hack Analysis</li> </ol>","tags":[]},{"location":"sctop10/SC02-IntegerOverflowUnderflow/","title":"Integer Overflow and Underflow","text":"","tags":[]},{"location":"sctop10/SC02-IntegerOverflowUnderflow/#vulnerability-integer-overflow-and-underflow","title":"Vulnerability: Integer Overflow and Underflow","text":"","tags":[]},{"location":"sctop10/SC02-IntegerOverflowUnderflow/#description","title":"Description:","text":"<p>Ethereum Virtual Machine (EVM) defines fixed-size data types for integers. This implies that the range of numbers that an integer variable can represent is finite.For instance, a \u201cuint8\u201d (unsigned integer of 8 bits; i.e., non-negative) can only store integers that fall between 0 and 255. The outcome of trying to store any value greater than 255 into an \u201cuint8\u201d will lead to an overflow. Similarly, the outcome of subtracting \u201c1\u201d from \u201c0\u201d will produce 255. This is called underflow.When an arithmetic operation exceeds or falls short of a type\u2019s maximum or minimum size, an overflow or underflow occurs.For signed integers, the outcome will be a bit different. If we try subtracting \u201c1\u201d from an int8 whose value is -128, we get 127. This is because signed int types, which may represent negative values, start over once we reach the highest negative value.Two straightforward examples of this behavior include periodic mathematical functions (adding 2 to the argument of sin leaves the value intact) and odometers in automobiles, which track distance traveled (they reset to 000000 after the maximum number, i.e., 999999, is exceeded).</p> <p>Important Note:- In Solidity <code>0.8.0</code> and above, the compiler automatically handles checking for overflows and underflows in arithmetic operations, reverting the transaction if an overflow or underflow occurs. Solidity <code>0.8.0</code> also introduces the <code>unchecked</code> keyword, which allows developers to perform arithmetic operations without these automatic checks, explicitly permitting overflow without reverting. This can be particularly useful for optimizing gas usage in cases where overflow is not a concern or where the wraparound behavior is desired, similar to how arithmetic behaved in earlier versions of Solidity.</p>","tags":[]},{"location":"sctop10/SC02-IntegerOverflowUnderflow/#example","title":"Example:","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ncontract TimeWrapVault {\n    mapping(address =&gt; uint256) public accountBalances;\n    mapping(address =&gt; uint256) public withdrawalUnlockTime;\n\n    // Allows anyone to deposit ETH and set a lock time\n    function depositFunds() external payable {\n        accountBalances[msg.sender] += msg.value;\n        withdrawalUnlockTime[msg.sender] = block.timestamp + 1 weeks;\n    }\n\n    // Vulnerable to overflow, the user could pass a very large value causing overflow\n    function extendLockTime(uint256 _additionalSeconds) public {\n        withdrawalUnlockTime[msg.sender] += _additionalSeconds;\n    }\n\n    // Allows withdrawals only if the current time is greater than the lock time\n    function releaseFunds() public {\n        require(accountBalances[msg.sender] &gt; 0, \"Insufficient funds\");\n        require(block.timestamp &gt; withdrawalUnlockTime[msg.sender], \"Lock time not expired\");\n\n        uint256 withdrawalAmount = accountBalances[msg.sender];\n        accountBalances[msg.sender] = 0;\n\n        (bool successfulWithdrawal,) = msg.sender.call{value: withdrawalAmount}(\"\");\n        require(successfulWithdrawal, \"Failed to send Ether\");\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC02-IntegerOverflowUnderflow/#impact","title":"Impact:","text":"<ul> <li>An attacker could exploit such vulnerabilities to artificially increase account balances or token amounts, potentially allowing them to withdraw more funds than they legitimately own.</li> <li>An attacker might alter the intended flow of contract logic, leading to unauthorized actions like stealing assets or minting an excessive number of tokens.</li> </ul>","tags":[]},{"location":"sctop10/SC02-IntegerOverflowUnderflow/#remediation","title":"Remediation:","text":"<ul> <li>The simplest approach is to use Solidity compiler version 0.8.0 or higher, as it automatically handles overflow and underflow checks.</li> <li>Make Use of the latest Safe Math Libraries: For the Ethereum community, OpenZeppelin has done a fantastic job creating and auditing secure libraries. Its SafeMath library, in particular, can be used to prevent under/overflow vulnerabilities. It provides functions like add(), sub(), mul(), etc., that carry out basic arithmetic operations and automatically revert if an overflow or underflow occurs.</li> </ul>","tags":[]},{"location":"sctop10/SC02-IntegerOverflowUnderflow/#examples-of-smart-contracts-that-fell-victim-to-integer-overflow-and-underflow-attacks","title":"Examples of Smart Contracts that fell victim to Integer Overflow and Underflow Attacks:","text":"<ol> <li>PoWH Coin Ponzi Scheme : A Comprehensive Hack Analysis</li> <li>Poolz Finance : A Comprehensive Hack Analysis</li> </ol>","tags":[]},{"location":"sctop10/SC03-TimestampDependence/","title":"Timestamp Dependence","text":"","tags":[]},{"location":"sctop10/SC03-TimestampDependence/#vulnerability-timestamp-dependence","title":"Vulnerability: Timestamp Dependence","text":"","tags":[]},{"location":"sctop10/SC03-TimestampDependence/#description","title":"Description:","text":"<p>Smart contracts on Ethereum often rely on block.timestamp for time-sensitive functions such as auctions, lotteries, and token vesting. However, block.timestamp is not entirely immutable because it can be adjusted slightly by the miner who mines the block, within a window of approximately 15 seconds according to Ethereum protocol implementations. This creates a vulnerability where a miner could manipulate the timestamp to their advantage. For instance, in a decentralized auction, a miner who is also a bidder could alter the timestamp to prematurely end the auction when they are the highest bidder, thereby securing an unfair win.</p>","tags":[]},{"location":"sctop10/SC03-TimestampDependence/#example","title":"Example:","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract DiceRoll {\n    uint256 public lastBlockTime;\n\n    constructor() payable {}\n\n    function rollDice() external payable {\n        require(msg.value == 5 ether, \"Must send 5 ether to play\"); // Player must send 5 ether to play\n        require(block.timestamp != lastBlockTime, \"Only 1 transaction per block allowed\"); // Ensures only 1 transaction per block\n\n        lastBlockTime = block.timestamp;\n\n        // Player wins if the last digit of the block timestamp is less than 5\n        if (block.timestamp % 10 &lt; 5) {\n            (bool sent,) = msg.sender.call{value: address(this).balance}(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC03-TimestampDependence/#impact","title":"Impact:","text":"<ul> <li>Smart contracts that use block timestamps for essential operations, such as timed executions, are susceptible to manipulation. Attackers can alter timestamps to trigger functions either prematurely or with delays, disrupting the intended outcomes. This can lead to issues like rewards being issued too early or necessary updates being postponed, destabilizing the contract's operations.</li> <li>By modifying block timestamps, attackers can exploit time-based mechanisms within contracts. For instance, in a lottery game, an attacker could adjust the timestamp to match specific conditions, increasing their chances of winning. Additionally, they could repeatedly execute functions in quick succession, potentially draining the contract's resources or gaining unfair advantages.</li> <li>Timestamp manipulation can facilitate front-running, where attackers execute transactions at strategically advantageous times before others. This predictability, influenced by their controlled timestamps, is particularly damaging in financial contexts. Such actions can result in significant losses for other participants while providing unfair gains to the attacker.</li> </ul>","tags":[]},{"location":"sctop10/SC03-TimestampDependence/#remediation","title":"Remediation:","text":"<ul> <li>To mitigate the risks of timestamp manipulation and improve the accuracy and security of smart contracts, it is recommended to use trusted external time sources or multiple time sources. This approach can help ensure more reliable timing.</li> <li>If you need to use block.timestamp, consider adding a time buffer. For example, you could set a rule that an auction will only end when block.timestamp is greater than the auction end time plus an additional minute. This grace period makes it harder for miners to manipulate the end time, providing a fairer outcome for participants.</li> </ul>","tags":[]},{"location":"sctop10/SC04-AccessControl/","title":"Access Control Vulnerabilities","text":"","tags":[]},{"location":"sctop10/SC04-AccessControl/#vulnerability-improper-access-control","title":"Vulnerability: Improper Access Control","text":"","tags":[]},{"location":"sctop10/SC04-AccessControl/#description","title":"Description:","text":"<p>An access control vulnerability is a security flaw that allows unauthorized users to access or modify the contract's data or functions. These vulnerabilities arise when the contract's code fails to adequately restrict access based on user permission levels. Access control in smart contracts can relate to governance and critical logic, such as minting tokens, voting on proposals, withdrawing funds, pausing and upgrading the contracts, and changing ownership.</p>","tags":[]},{"location":"sctop10/SC04-AccessControl/#example-hospowise-hack","title":"Example (HospoWise Hack):","text":"<pre><code>function burn(address account, uint256 amount) public { //No proper access control is implemented for the burn function\n        _burn(account, amount);\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC04-AccessControl/#impact","title":"Impact:","text":"<ul> <li>Attackers can gain unauthorized access to critical functions and data within the contract, compromising its integrity and security.</li> <li>Vulnerabilities can lead to the theft of funds or assets controlled by the contract, causing significant financial damage to users and stakeholders.</li> </ul>","tags":[]},{"location":"sctop10/SC04-AccessControl/#remediation","title":"Remediation:","text":"<ul> <li>Ensure initialization functions can only be called once and exclusively by authorized entities.</li> <li>Use established access control patterns like Ownable or RBAC (Role-Based Access Control) in your contracts to manage permissions and ensure that only authorized users can access certain functions. This can be done by adding appropriate access control modifiers, such as <code>onlyOwner</code> or custom roles to sensitive functions.</li> </ul>","tags":[]},{"location":"sctop10/SC04-AccessControl/#examples-of-smart-contracts-that-fell-victim-to-improper-access-control-attacks","title":"Examples of Smart Contracts That Fell Victim to Improper Access Control Attacks:","text":"<ol> <li>HospoWise Hack : A Comprehensive Hack Analysis</li> <li>LAND NFT Hack : A Comprehensive Hack Analysis</li> </ol>","tags":[]},{"location":"sctop10/SC05-FrontRunning/","title":"Front-running Attacks","text":"","tags":[]},{"location":"sctop10/SC05-FrontRunning/#vulnerability-front-running-attacks","title":"Vulnerability: Front-Running Attacks","text":"","tags":[]},{"location":"sctop10/SC05-FrontRunning/#description","title":"Description:","text":"<p>Front-running is a type of attack where a malicious actor exploits knowledge of pending transactions in a blockchain network to gain an unfair advantage. This is particularly prevalent in decentralized finance (DeFi) ecosystems. Attackers observe the mempool (a list of pending transactions) and strategically place their own transactions with higher gas fees to ensure they are processed before the target transaction. This can lead to significant financial losses for the victim and disrupt the intended functionality of the smart contract.</p>","tags":[]},{"location":"sctop10/SC05-FrontRunning/#example","title":"Example :","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VulnerableSwap {\n    address public pancakeRouter;\n    address public ssToken;\n\n    constructor(address _pancakeRouter, address _ssToken) {\n        pancakeRouter = _pancakeRouter;\n        ssToken = _ssToken;\n    }\n\n    function swapBNBForSSToken(uint256 amount) private {\n        address[] memory path = new address[](2);\n        path[0] = IPancakeRouter02(pancakeRouter).WETH();\n        path[1] = ssToken;\n\n        IPancakeRouter02(pancakeRouter).swapExactETHForTokensSupportingFeeOnTransferTokens{\n            value: amount\n        }(0, path, address(this), block.timestamp);\n    }\n}\n</code></pre> <p>Note: In the example above, a user wants to swap BNB for SSToken. However, the function lacks proper slippage checks, making it vulnerable to front-running. An attacker can observe a large swap transaction and insert their own transaction with a higher gas fee to be processed first, causing the victim's transaction to execute at a less favorable rate.</p>","tags":[]},{"location":"sctop10/SC05-FrontRunning/#impact","title":"Impact:","text":"<ul> <li>Victims can end up paying significantly more for a token or receiving much less than expected due to the manipulated order of transactions.</li> <li>Front-runners can artificially inflate or deflate token prices by executing large trades ahead of others.</li> </ul>","tags":[]},{"location":"sctop10/SC05-FrontRunning/#remediation","title":"Remediation:","text":"<ul> <li>Implement slippage restrictions between 0.1% and 5%, depending on network fees and swap size, to protect against front-runners exploiting higher slippage rates.</li> <li>Use a two-step process where users commit to an action without revealing details, then disclose the exact information later, making it harder for attackers to anticipate and exploit transactions.</li> <li>Bundle several transactions together and process them as one unit to make it more difficult for attackers to single out and exploit individual trades.</li> <li>Continuously surveil for automated bots and scripts that might exploit front-running opportunities, aiding in early detection and mitigation.</li> </ul>","tags":[]},{"location":"sctop10/SC06-DOS/","title":"Denial of Service (DoS) Attacks","text":"","tags":[]},{"location":"sctop10/SC06-DOS/#vulnerability-denial-of-service","title":"Vulnerability: Denial Of Service","text":"","tags":[]},{"location":"sctop10/SC06-DOS/#description","title":"Description:","text":"<p>A Denial of Service (DoS) attack in Solidity involves exploiting vulnerabilities to exhaust resources like gas, CPU cycles, or storage, making a smart contract unusable. Common types include gas exhaustion attacks, where malicious actors create transactions requiring excessive gas, reentrancy attacks that exploit contract call sequences to access unauthorized funds, and block gas limit attacks that consume block gas, hindering legitimate transactions.</p>","tags":[]},{"location":"sctop10/SC06-DOS/#example","title":"Example :","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract VulnerableKingOfEther {\n    address public king;\n    uint256 public balance;\n\n    function claimThrone() external payable {\n        require(msg.value &gt; balance, \"Need to pay more to become the king\");\n\n        (bool sent,) = king.call{value: balance}(\"\");\n        require(sent, \"Failed to send Ether\");  // if the current king's fallback function reverts, it will prevent others from becoming the new king, causing a Denial of Service.\n\n        balance = msg.value;\n        king = msg.sender;\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC06-DOS/#impact","title":"Impact:","text":"<ul> <li>A successful DoS attack can render the smart contract unresponsive, preventing users from interacting with it as intended. This can disrupt critical operations and services relying on the contract.</li> <li>DoS attacks can lead to financial losses, especially in decentralized applications (dApps) where smart contracts manage funds or assets.</li> <li>A DoS attack can tarnish the reputation of the smart contract and its associated platform. Users may lose trust in the platform's security and reliability, leading to a loss of users and business opportunities.</li> </ul>","tags":[]},{"location":"sctop10/SC06-DOS/#remediation","title":"Remediation:","text":"<ul> <li>Ensure smart contracts can handle consistent failures, such as asynchronous processing of potentially failing external calls, to maintain contract integrity and prevent unexpected behavior.</li> <li>Be cautious when using <code>call</code> for external calls, loops, and traversals to avoid excessive gas consumption, which could lead to failed transactions or unexpected costs.</li> <li>Avoid over-authorizing a single role in contract permissions. Instead, divide permissions reasonably and use multi-signature wallet management for roles with critical permissions to prevent permission loss due to private key compromise.</li> </ul>","tags":[]},{"location":"sctop10/SC07-LogicErrors/","title":"Logic Errors","text":"","tags":[]},{"location":"sctop10/SC07-LogicErrors/#vulnerability-logic-errors","title":"Vulnerability: Logic Errors","text":"","tags":[]},{"location":"sctop10/SC07-LogicErrors/#description","title":"Description:","text":"<p>Logic errors, also known as business logic vulnerabilities, are subtle flaws in smart contracts. They occur when the contract's code does not match its intended behavior. These errors are elusive, hiding within the contract's logic and waiting to be discovered.</p>","tags":[]},{"location":"sctop10/SC07-LogicErrors/#example","title":"Example :","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract LendingPlatform {\n    mapping(address =&gt; uint256) public userBalances;\n    uint256 public totalLendingPool;\n\n    function deposit() public payable {\n        userBalances[msg.sender] += msg.value;\n        totalLendingPool += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(userBalances[msg.sender] &gt;= amount, \"Insufficient balance\");\n\n        // Faulty calculation: Incorrectly reducing the user's balance without updating the total lending pool\n        userBalances[msg.sender] -= amount;\n\n        // This should update the total lending pool, but it's omitted here.\n\n        payable(msg.sender).transfer(amount);\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC07-LogicErrors/#impact","title":"Impact:","text":"<ul> <li>Logic errors can cause a smart contract to behave unexpectedly or even become entirely unusable. These errors can result in the loss of funds, incorrect distribution of tokens, or other adverse outcomes, potentially leading to significant financial and operational consequences for users and stakeholders.</li> </ul>","tags":[]},{"location":"sctop10/SC07-LogicErrors/#remediation","title":"Remediation:","text":"<ul> <li>Always validate your code by writing comprehensive test cases that cover all the possible business logic.</li> <li>Conduct thorough code reviews and audits to identify and fix potential logic errors.</li> <li>Document the intended behavior of each function and module, and then compare it to the actual implementation to ensure alignment.</li> </ul>","tags":[]},{"location":"sctop10/SC07-LogicErrors/#examples-of-smart-contracts-that-fell-victim-to-business-logic-attacks","title":"Examples of Smart Contracts That Fell Victim to Business Logic Attacks:","text":"<ol> <li>Level Finance Hack : A Comprehensive Hack Analysis</li> <li>BNO Hack : A Comprehensive Hack Analysis</li> </ol>","tags":[]},{"location":"sctop10/SC08-InsecureRandomness/","title":"Insecure Randomness","text":"","tags":[]},{"location":"sctop10/SC08-InsecureRandomness/#vulnerability-insecure-randomness","title":"Vulnerability: Insecure Randomness","text":"","tags":[]},{"location":"sctop10/SC08-InsecureRandomness/#description","title":"Description:","text":"<p>Random number generators are essential for applications like gambling, game-winner selection, and random seed generation. On Ethereum, generating random numbers is challenging due to its deterministic nature. Since Solidity cannot produce true random numbers, it relies on pseudorandom factors. Additionally, complex calculations in Solidity are costly in terms of gas.</p> <p>Insecure Mechanisms Create Random Numbers in Solidity: Developers often use block-related methods to generate random numbers, such as:   - block.timestamp: Current block timestamp.   - blockhash(uint blockNumber): Hash of a given block (only for the last 256 blocks).   - block.difficulty: Current block difficulty.   - block.number: Current block number.   - block.coinbase: Address of the current block\u2019s miner.</p> <p>These methods are insecure because miners can manipulate them, affecting the contract\u2019s logic.</p>","tags":[]},{"location":"sctop10/SC08-InsecureRandomness/#example","title":"Example :","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract InsecureRandomNumber {\n    constructor() payable {}\n\n    function guess(uint256 _guess) public {\n        uint256 answer = uint256(\n            keccak256(\n                abi.encodePacked(block.timestamp, block.difficulty, msg.sender) // Using insecure mechanisms for random number generation\n            ) \n        );\n\n        if (_guess == answer) {\n            (bool sent,) = msg.sender.call{value: 1 ether}(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC08-InsecureRandomness/#impact","title":"Impact:","text":"<ul> <li>Insecure randomness can be exploited by attackers to gain an unfair advantage in games, lotteries, and any other contracts that rely on random number generation. By predicting or manipulating the supposedly random outcomes, attackers can influence the results in their favor. This can lead to unfair wins, financial losses for other participants, and a general lack of trust in the smart contract's integrity and fairness. </li> </ul>","tags":[]},{"location":"sctop10/SC08-InsecureRandomness/#remediation","title":"Remediation:","text":"<ul> <li>Using oracles (Oraclize) as external sources of randomness. Care should be taken while trusting the Oracle. Multiple Oracles can also be used.</li> <li>Using Commitment Schemes \u2014 A cryptographic primitive that uses a commit-reveal approach can be followed. It also has wide applications in coin flipping, zero-knowledge proofs, and secure computation. E.g.: RANDAO.</li> <li>Chainlink VRF \u2014 It is a provably fair and verifiable random number generator (RNG) that enables smart contracts to access random values without compromising security or usability.</li> <li>The Signidice Algorithm \u2014 Suitable for PRNG in applications involving two parties using cryptographic signatures.</li> <li>Bitcoin Block Hashes \u2014 Oracles like BTCRelay can be used which act as a bridge between Ethereum and Bitcoin. Contracts on Ethereum can request future block hashes from the Bitcoin Blockchain as a source of entropy. It should be noted that this approach is not safe against the miner incentive problem and should be implemented with caution.</li> </ul>","tags":[]},{"location":"sctop10/SC08-InsecureRandomness/#examples-of-smart-contracts-that-fell-victim-to-insecure-randomness-attacks","title":"Examples of Smart Contracts That Fell Victim to Insecure Randomness Attacks:","text":"<ol> <li>Roast Football Hack : A Comprehensive Hack Analysis</li> <li>FFIST Hack : A Comprehensive Hack Analysis</li> </ol>","tags":[]},{"location":"sctop10/SC09-GasLimit/","title":"Gas Limit Vulnerabilities","text":"","tags":[]},{"location":"sctop10/SC09-GasLimit/#vulnerability-gas-limit-vulnerabilities","title":"Vulnerability: Gas Limit Vulnerabilities","text":"","tags":[]},{"location":"sctop10/SC09-GasLimit/#description","title":"Description:","text":"<p>In Ethereum and other blockchain platforms, every operation performed by a smart contract consumes a certain amount of gas, which is a unit of computational effort. The block gas limit is the maximum amount of gas that can be used in a single block. If a function in a smart contract requires more gas than the block gas limit to complete its execution, the transaction will fail. This type of vulnerability is particularly common in loops that iterate over dynamic data structures, such as arrays or lists, where the number of iterations is not fixed and can grow arbitrarily large.</p>","tags":[]},{"location":"sctop10/SC09-GasLimit/#example","title":"Example :","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TokenTransfer {\n    mapping(address =&gt; uint256) public balances;\n\n    function transfer(address _to, uint256 _amount) public {\n        require(balances[msg.sender] &gt;= _amount, \"Insufficient balance\");\n\n        for (uint256 i = 0; i &lt; _amount; i++) {  // The loop iterates _amount times, which can be very inefficient and can potentially exceed the block gas limit if _amount is too large.\n            balances[msg.sender]--; \n            balances[_to]++; \n        }\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC09-GasLimit/#impact","title":"Impact:","text":"<ul> <li>Functions that are susceptible to gas limit issues can become unexecutable, resulting in locked funds or a frozen contract state. When these functions fail to complete due to exceeding the gas limit, any funds associated with the transaction remain inaccessible, effectively locking them within the contract.  </li> </ul>","tags":[]},{"location":"sctop10/SC09-GasLimit/#remediation","title":"Remediation:","text":"<ul> <li>The functions should validate that the users can\u2019t control the variable length used inside the loop to traverse a large amount of data. If it can\u2019t be omitted, then there should be a limit on the length as per the code logic.</li> <li>Whenever loops are used in Solidity, the developers should pay special attention to the actions happening inside the loop to make sure that the transaction does not consume excessive gas and does not go over the gas limit.</li> </ul>","tags":[]},{"location":"sctop10/SC10-UncheckedCalls/","title":"Unchecked External Calls","text":"","tags":[]},{"location":"sctop10/SC10-UncheckedCalls/#vulnerability-unchecked-external-calls","title":"Vulnerability: Unchecked External Calls","text":"","tags":[]},{"location":"sctop10/SC10-UncheckedCalls/#description","title":"Description:","text":"<p>Unchecked external calls refer to a security flaw where a contract makes an external call to another contract or address without properly checking the outcome of that call. In Ethereum, when a contract calls another contract, the called contract can fail silently without throwing an exception. If the calling contract doesn\u2019t check the return value, it might incorrectly assume the call was successful, even if it wasn't. This can lead to inconsistencies in the contract state and vulnerabilities that attackers can exploit.</p>","tags":[]},{"location":"sctop10/SC10-UncheckedCalls/#example","title":"Example:","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.4.24;\n\ncontract Proxy {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function forward(address callee, bytes _data) public {\n        require(callee.delegatecall(_data));\n    }\n}\n</code></pre>","tags":[]},{"location":"sctop10/SC10-UncheckedCalls/#impact","title":"Impact:","text":"<ul> <li>Unchecked external calls can result in failed transactions, causing the intended operations to not be completed successfully. This can lead to the loss of funds, as the contract may proceed under the false assumption that the transfer was successful. Additionally, it can create an incorrect contract state, making the contract vulnerable to further exploits and inconsistencies in its logic.</li> </ul>","tags":[]},{"location":"sctop10/SC10-UncheckedCalls/#remediation","title":"Remediation:","text":"<ul> <li>Whenever possible, use transfer() instead of send(), as transfer() reverts the transaction if the external call fails.</li> <li>Always check the return value of send() or call() functions to ensure proper handling if they return false.</li> </ul>","tags":[]},{"location":"sctop10/SC10-UncheckedCalls/#examples-of-smart-contracts-that-fell-victim-to-unchecked-external-call-attacks","title":"Examples of Smart Contracts That Fell Victim to Unchecked External Call Attacks:","text":"<ol> <li>Punk Protocol Hack : A Comprehensive Hack Analysis</li> </ol>","tags":[]}]}